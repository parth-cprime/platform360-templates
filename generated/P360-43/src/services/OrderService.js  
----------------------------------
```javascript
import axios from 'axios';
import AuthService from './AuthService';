const API_URL = process.env.REACT_APP_API_URL;

class OrderService {
  static async getOrders() {
    const token = AuthService.getToken();
    const response = await axios.get(`${API_URL}/orders`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    return response.data;
  }

  static async getOrder(id) {
    const token = AuthService.getToken();
    const response = await axios.get(`${API_URL}/orders/${id}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    return response.data;
  }

  static async createOrder(order) {
    const token = AuthService.getToken();
    const response = await axios.post(`${API_URL}/orders`, order, {
      headers: { Authorization: `Bearer ${token}` }
    });
    return response.data;
  }
}

export default OrderService;
```
Description: A service class that handles API calls related to orders. It uses Axios for making HTTP requests and includes the JWT token in the headers for authentication. The API URL is read from an environment variable.

The other components (`OrderDetails`, `OrderForm`) and services (`AuthService`) would follow a similar structure. 

For testing, unit tests can be written for the components and services using a testing library like Jest. Integration tests can be added in the `/tests/integration` folder to test the API endpoints.

This project structure organizes the code into logical modules, separates concerns, and follows React best practices and security guidelines. Let me know if you would like me to elaborate on any part of the code or project setup!