Here is a sample secure react project based on the provided requirements and templates:

```
README.md

# Order Management API

This project implements an Order Management API in react, following security best practices and a modular project structure.

## Overview

The Order Management API allows managing orders and includes features for user authentication and authorization using JWT tokens. It follows react coding standards, implements security measures, and includes unit and integration tests.

## Folder Structure

- src/
  - controllers/
    - orderController.js
  - models/ 
    - orderModel.js
    - userModel.js
  - routes/
    - orderRoutes.js 
    - authRoutes.js
  - services/
    - orderService.js
    - authService.js
  - middleware/
    - authMiddleware.js
    - errorMiddleware.js
  - config/
    - db.js
    - security.js
  - tests/
    - unit/
    - integration/
  - app.js
- package.json
- .env

## Key Components

- Controllers: Handle API requests and responses
- Models: Define data schemas 
- Routes: Define API endpoints
- Services: Contain business logic
- Middleware: Implement cross-cutting concerns like authentication and error handling
- Config: Configuration for the database and security
- Tests: Unit and integration tests

## Setup

1. Install dependencies: `npm install`
2. Set environment variables in `.env` for things like the database connection string, JWT secret key, etc.
3. Run the app: `npm start`
4. Run tests: `npm test`

## Security Considerations

- Uses JWT for authentication 
- Password hashing with bcrypt
- Protects against common attacks with helmet
- Implements rate limiting
- Validates and sanitizes user input
- Handles errors securely without leaking sensitive data

```

File 1:
```
Path: src/controllers/orderController.js
Brief: Handles requests to the order endpoints.

const Order = require('../models/orderModel');
const orderService = require('../services/orderService');

const createOrder = async (req, res, next) => {
  try {
    const order = await orderService.createOrder(req.body);
    res.status(201).json(order);
  } catch (err) {
    next(err);
  }
};

const getOrder = async (req, res, next) => {
  try {
    const order = await orderService.getOrderById(req.params.id);
    if (!order) {
      res.status(404).json({ error: 'Order not found' });
    } else {
      res.json(order);
    }
  } catch (err) {
    next(err);
  }
};

module.exports = {
  createOrder,
  getOrder
};
```

File 2: 
```
Path: src/models/orderModel.js  
Brief: Defines the schema for an order.

const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
  user: { 
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  items: [{
    product: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Product',
      required: true  
    },
    quantity: {
      type: Number,
      required: true,
      min: 1
    }
  }],
  total: {
    type: Number,
    required: true 
  },
  status: {
    type: String,
    enum: ['pending', 'processed', 'shipped', 'delivered'],
    default: 'pending'
  }
}, { 
  timestamps: true
});

module.exports = mongoose.model('Order', orderSchema);
```

File 3:
```
Path: src/routes/orderRoutes.js
Brief: Defines the routes for order related endpoints.

const express = require('express');
const router = express.Router();
const orderController = require('../controllers/orderController');
const authMiddleware = require('../middleware/authMiddleware');

router.post('/', authMiddleware, orderController.createOrder);
router.get('/:id', authMiddleware, orderController.getOrder);  

module.exports = router;
```

File 4:
```
Path: src/services/orderService.js
Brief: Contains the business logic for orders.

const Order = require('../models/orderModel');

const createOrder = async (orderData) => {
  const order = new Order(orderData);
  await order.save();
  return order;
};

const getOrderById = async (id) => {
  const order = await Order.findById(id).populate('user', 'name email').populate('items.product', 'name price');
  return order;
};

module.exports = {
  createOrder,
  getOrderById
};
```

There would be additional similar files for auth related components following the same structure and principles.

The app.js file would bring everything together:

```js
// app.js
const express = require('express');
const mongoose = require('mongoose');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const config = require('./config/security');
const orderRoutes = require('./routes/orderRoutes');
const authRoutes = require('./routes/authRoutes');
const errorMiddleware = require('./middleware/errorMiddleware');

const app = express();

mongoose.connect(process.env.MONGO_URI);

app.use(express.json());
app.use(helmet());
app.use(rateLimit(config.rateLimit));

app.use('/api/orders', orderRoutes);
app.use('/api/auth', authRoutes);

app.use(errorMiddleware);

module.exports = app;
```

This provides a high-level skeleton of what a secure, well-structured react Order Management API might look like based on the provided requirements. The actual implementation would include more detailed functionality, along with auth components, validation logic, unit and integration tests, and more extensive error handling. But this illustrates the general project organization and key security considerations.

Let me know if you have any other questions!