Here is a sample secure React project for the order management API based on the provided requirements and templates:

```
README.md

# Order Management API

This project implements an order management API in React, following security best practices.

## Project Overview
The Order Management API allows customers to submit and manage orders through a secure web API. It includes user authentication using JWT tokens and implements role-based access control.

## Folder Structure
- /src
  - /components  # Reusable React components 
  - /pages       # Top-level page components
  - /services    # Business and data access logic
  - /utils       # Utility functions and helpers
- /public        # Static assets
- package.json   # Project dependencies
- README.md      # Project documentation

## Key Components
- App.js: Main application component
- Login.js: User login page 
- Orders.js: Displays list of orders
- OrderDetails.js: Shows details for an order
- OrderService.js: Handles order data access

## Setup Instructions
1. Clone the repository
2. Run `npm install` to install dependencies
3. Configure environment variables in `.env` file
4. Run `npm start` to launch the development server

## Security Considerations 
- User authentication via JWT tokens
- Role-based access control for authorized users
- Input validation to prevent injection attacks
- Error handling and logging of security events
- Following OWASP security guidelines
```

File 1:
```
Path: src/App.js
Purpose: Main application component that sets up routing.

import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import LoginPage from './pages/LoginPage';
import OrdersPage from './pages/OrdersPage';
import RequireAuth from './components/RequireAuth';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/login" component={LoginPage} />
        <RequireAuth path="/orders" component={OrdersPage} />
      </Switch>
    </Router>
  );
}

export default App;
```

File 2:  
```
Path: src/pages/LoginPage.js
Purpose: Allows users to log in and acquire a JWT token.

import React, { useState } from 'react';
import { useHistory } from 'react-router-dom';
import userService from '../services/userService';

const LoginPage = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const history = useHistory();

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      await userService.login(username, password);
      history.push('/orders');
    } catch (error) {
      console.error('Login failed', error);
      alert('Invalid username or password');
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Username:</label>
          <input type="text" value={username} onChange={e => setUsername(e.target.value)} />
        </div>
        <div>
          <label>Password:</label>
          <input type="password" value={password} onChange={e => setPassword(e.target.value)} />
        </div>
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default LoginPage;
```

File 3:
```
Path: src/services/userService.js 
Purpose: Handles user authentication and token management.

import axios from 'axios';
import jwtDecode from 'jwt-decode';

const login = async (username, password) => {
  const response = await axios.post('/api/login', { username, password });
  const { token } = response.data;
  localStorage.setItem('token', token);
};

const logout = () => {
  localStorage.removeItem('token');
};

const getLoggedInUser = () => {
  const token = localStorage.getItem('token');
  if (!token) return null;
  
  const decodedToken = jwtDecode(token);
  if (decodedToken.exp < Date.now() / 1000) {
    logout();
    return null;
  }
  
  return decodedToken.sub;
};

export default {
  login,
  logout,
  getLoggedInUser,
};
```

File 4:
```
Path: src/components/RequireAuth.js
Purpose: Higher-order component to protect routes requiring authentication.

import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import userService from '../services/userService';

const RequireAuth = ({ component: Component, ...rest }) => {
  const isAuthenticated = () => {
    return userService.getLoggedInUser() !== null;
  };

  return (
    <Route
      {...rest}
      render={props =>
        isAuthenticated() ? (
          <Component {...props} />
        ) : (
          <Redirect to={{ pathname: '/login', state: { from: props.location } }} />
        )
      }
    />
  );
};

export default RequireAuth;
```

This covers the core structure and security setup for the React order management API. The `OrdersPage` and `OrderDetails` components, along with the `OrderService`, would be implemented following a similar pattern to handle displaying and interacting with order data.

The code separates concerns, uses secure authentication, implements protected routes, and follows the provided templates and security guidelines. Let me know if you have any other questions!