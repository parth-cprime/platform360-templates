Here is the generated project based on the provided requirements and templates:

```
README.md

# Order Management API

This project implements a secure Order Management API using Java and Spring Boot. It follows best practices for code organization, security, and testing.

## Project Overview

The Order Management API allows managing orders and provides functionalities for creating, retrieving, updating, and deleting orders. It incorporates authentication and authorization using JWT tokens to ensure secure access to the API endpoints.

## Folder Structure

The project follows a standard Java project structure:

- `src/main/java`: Contains the main application code
  - `com.example.ordermanagement`: Base package for the application
    - `config`: Configuration classes
    - `controller`: API controller classes
    - `dto`: Data Transfer Object classes
    - `exception`: Custom exception classes
    - `model`: Domain model classes
    - `repository`: Data access layer interfaces
    - `security`: Security-related classes
    - `service`: Service layer classes
- `src/main/resources`: Contains application configuration files
- `src/test/java`: Contains test classes

## Key Components

- `OrderController`: Handles HTTP requests for order-related operations
- `OrderService`: Implements the business logic for managing orders
- `OrderRepository`: Provides data access methods for orders
- `SecurityConfig`: Configures security settings for the application
- `JwtTokenProvider`: Generates and validates JWT tokens
- `GlobalExceptionHandler`: Handles exceptions and returns appropriate error responses

## Setup Instructions

1. Clone the repository: `git clone https://github.com/your-repo.git`
2. Navigate to the project directory: `cd order-management-api`
3. Build the project: `./mvnw clean install`
4. Run the application: `./mvnw spring-boot:run`
5. The API will be accessible at `http://localhost:8080/api`

## Security Considerations

- The API uses JWT-based authentication and authorization.
- Passwords are hashed using BCrypt before storing them in the database.
- User input is validated to prevent common security vulnerabilities.
- Sensitive information is not logged or exposed in error messages.

---

src/main/java/com/example/ordermanagement/config/SecurityConfig.java
```java
package com.example.ordermanagement.config;

// Imports

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    
    @Autowired
    private JwtTokenProvider jwtTokenProvider;
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeRequests()
            .antMatchers("/api/public/**").permitAll()
            .antMatchers("/api/orders/**").authenticated()
            .and()
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .addFilterBefore(new JwtAuthenticationFilter(jwtTokenProvider), UsernamePasswordAuthenticationFilter.class);
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```
Description: Configures security settings for the application, including JWT authentication and authorization.

src/main/java/com/example/ordermanagement/security/JwtTokenProvider.java
```java
package com.example.ordermanagement.security;

// Imports

@Component
public class JwtTokenProvider {
    
    private final String JWT_SECRET = "your-jwt-secret";
    private final long JWT_EXPIRATION_MS = 86400000; // 24 hours
    
    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("role", userDetails.getAuthorities().iterator().next().getAuthority());
        
        return Jwts.builder()
            .setClaims(claims)
            .setSubject(userDetails.getUsername())
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + JWT_EXPIRATION_MS))
            .signWith(SignatureAlgorithm.HS512, JWT_SECRET)
            .compact();
    }
    
    public boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(JWT_SECRET).parseClaimsJws(token);
            return true;
        } catch (Exception ex) {
            return false;
        }
    }
    
    public String getUsernameFromToken(String token) {
        Claims claims = Jwts.parser().setSigningKey(JWT_SECRET).parseClaimsJws(token).getBody();
        return claims.getSubject();
    }
}
```
Description: Provides methods for generating and validating JWT tokens.

src/main/java/com/example/ordermanagement/controller/OrderController.java
```java
package com.example.ordermanagement.controller;

// Imports

@RestController
@RequestMapping("/api/orders")
public class OrderController {
    
    @Autowired
    private OrderService orderService;
    
    @PostMapping
    public ResponseEntity<OrderDTO> createOrder(@Valid @RequestBody OrderDTO orderDTO) {
        OrderDTO createdOrder = orderService.createOrder(orderDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdOrder);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<OrderDTO> getOrderById(@PathVariable Long id) {
        OrderDTO orderDTO = orderService.getOrderById(id);
        return ResponseEntity.ok(orderDTO);
    }
    
    // Other endpoints for updating and deleting orders
}
```
Description: Defines the API endpoints for order-related operations.

src/main/java/com/example/ordermanagement/service/OrderService.java
```java
package com.example.ordermanagement.service;

// Imports

@Service
public class OrderService {
    
    @Autowired
    private OrderRepository orderRepository;
    
    @Autowired
    private ModelMapper modelMapper;
    
    public OrderDTO createOrder(OrderDTO orderDTO) {
        Order order = modelMapper.map(orderDTO, Order.class);
        Order savedOrder = orderRepository.save(order);
        return modelMapper.map(savedOrder, OrderDTO.class);
    }
    
    public OrderDTO getOrderById(Long id) {
        Order order = orderRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Order", "id", id));
        return modelMapper.map(order, OrderDTO.class);
    }
    
    // Other service methods for updating and deleting orders
}
```
Description: Implements the business logic for managing orders.

src/main/java/com/example/ordermanagement/exception/GlobalExceptionHandler.java
```java
package com.example.ordermanagement.exception;

// Imports

@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleResourceNotFoundException(ResourceNotFoundException ex) {
        ErrorResponse errorResponse = new ErrorResponse(
            HttpStatus.NOT_FOUND.value(),
            ex.getMessage(),
            System.currentTimeMillis()
        );
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
    }
    
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ErrorResponse> handleValidationException(MethodArgumentNotValidException ex) {
        String errorMessage = ex.getBindingResult().getAllErrors().stream()
            .map(DefaultMessageSourceResolvable::getDefaultMessage)
            .collect(Collectors.joining(", "));
        
        ErrorResponse errorResponse = new ErrorResponse(
            HttpStatus.BAD_REQUEST.value(),
            errorMessage,
            System.currentTimeMillis()
        );
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
    }
    
    // Other exception handlers
}
```
Description: Handles exceptions and returns appropriate error responses.

The project also includes other necessary files such as domain model classes, data transfer objects (DTOs), repository interfaces, and test classes.

This is a basic structure of the Order Management API project based on the provided requirements and templates. The code follows Java best practices, incorporates security features, and is organized in a modular and maintainable way.