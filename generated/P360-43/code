Here's the secure code implementation based on the provided task details, requirements, and security template:

```java
// SecurityConfig.java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeRequests()
            .antMatchers("/api/public/**").permitAll()
            .antMatchers("/api/orders/**").authenticated()
            .and()
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .oauth2ResourceServer()
            .jwt();
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

// JwtTokenProvider.java
@Component
public class JwtTokenProvider {
    
    private final String jwtSecret;
    private final long jwtExpirationInMs;
    
    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("roles", userDetails.getAuthorities());
        
        return Jwts.builder()
            .setClaims(claims)
            .setSubject(userDetails.getUsername())
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationInMs))
            .signWith(SignatureAlgorithm.HS512, jwtSecret)
            .compact();
    }
}

// OrderController.java
@RestController
@RequestMapping("/api/orders")
public class OrderController {
    
    @PostMapping
    public ResponseEntity<?> createOrder(@Valid @RequestBody OrderDTO orderDTO) {
        // Implementation
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<?> getOrder(@PathVariable Long id) {
        // Implementation
    }
    
    // Other order management endpoints
}

// OrderDTO.java
public class OrderDTO {
    @NotNull(message = "Customer ID is required")
    private Long customerId;
    
    @NotEmpty(message = "Product list cannot be empty")
    private List<Long> productIds;
    
    @Min(value = 1, message = "Quantity must be at least 1")
    private int quantity;
    
    // Other order fields
}

// GlobalExceptionHandler.java
@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<ErrorResponse> handleValidationException(ValidationException ex) {
        ErrorResponse error = new ErrorResponse(
            "Validation Error",
            ex.getMessage(),
            HttpStatus.BAD_REQUEST
        );
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }
    
    @ExceptionHandler(AuthenticationException.class)
    public ResponseEntity<ErrorResponse> handleAuthenticationException(AuthenticationException ex) {
        ErrorResponse error = new ErrorResponse(
            "Authentication Error",
            ex.getMessage(),
            HttpStatus.UNAUTHORIZED
        );
        return new ResponseEntity<>(error, HttpStatus.UNAUTHORIZED);
    }
}
```

In this implementation:

1. The `SecurityConfig` class configures the security settings for the API. It enables OAuth2 authentication using JWT tokens and restricts access to the `/api/orders` endpoints to authenticated users only.

2. The `JwtTokenProvider` class generates JWT tokens based on user details and sets the token expiration time.

3. The `OrderController` class defines the endpoints for order management. It includes annotations for input validation using the `@Valid` annotation.

4. The `OrderDTO` class represents the data transfer object for an order. It includes validation annotations to ensure the required fields are present and meet certain criteria.

5. The `GlobalExceptionHandler` class provides centralized exception handling for validation and authentication errors. It returns appropriate error responses with relevant status codes.

Note: Make sure to properly configure the OAuth2 authentication provider, such as by integrating with an identity provider or implementing your own authentication server.

This code follows the provided security template and incorporates secure practices such as input validation, authentication using OAuth2 with JWT tokens, and proper error handling. It ensures that only authenticated users can access the order management endpoints and validates the input data to prevent potential security vulnerabilities.