Here is a sample secure React implementation for the order management API based on the provided requirements and templates:

```
1. README.md
# Order Management API 

## Project Overview
This project implements an Order Management API in React with secure authentication using JWT tokens. It allows creating, viewing, updating and deleting orders with proper access controls.

## Folder Structure
- `/src` - Contains main source code
  - `/components` - Reusable React components 
  - `/pages` - Top level page components
  - `/services` - Service layer for API integration
  - `/utils` - Utility functions and helpers
- `/public` - Public assets like index.html, images, etc. 
- `/tests` - Unit and integration tests

## Key Components
- `App.js` - Main application component
- `Router.js` - Defines routes and corresponding page components 
- `AuthProvider.js` - Authentication context provider
- `api.js` - Axios instance for making API requests
- `orderService.js` - Methods for order CRUD operations

## Setup
1. Clone the repo
2. Run `npm install` to install dependencies 
3. Set `REACT_APP_API_URL` environment variable to backend API URL
4. Run `npm start` to launch dev server

## Security Considerations 
- All API endpoints are protected and require valid JWT token
- Secure HTTP only cookies used for authentication
- API implements rate limiting to prevent abuse
- Sensitive data is never stored on client side
- Input validation and sanitization to prevent XSS
- Content Security Policy (CSP) headers to mitigate XSS, clickjacking, etc.

2. File Details

File: src/App.js
Path: src/App.js
Description: Main application component that sets up providers and renders routes.

import React from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import { AuthProvider } from './AuthProvider';
import Routes from './Routes';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes />
      </Router>  
    </AuthProvider>
  );
}

export default App;

----

File: src/Routes.js  
Path: src/Routes.js
Description: Defines application routes and maps them to page components.

import React from 'react';
import { Route, Switch } from 'react-router-dom';
import Orders from './pages/Orders';
import Login from './pages/Login';
import PrivateRoute from './components/PrivateRoute';

export default function Routes() {
  return (
    <Switch>
      <Route path="/login" component={Login} />
      <PrivateRoute exact path="/" component={Orders} />
    </Switch>
  );
}

----

File: src/components/PrivateRoute.js
Path: src/components/PrivateRoute.js  
Description: Higher-order component that checks authentication before rendering route.

import React from 'react';
import { Redirect } from 'react-router-dom';
import { useAuth } from '../AuthProvider';

export default function PrivateRoute({ component: Component, ...rest }) {
  const { isAuthenticated } = useAuth();
   
  return isAuthenticated ? (
    <Route {...rest} render={props => <Component {...props} />} /> 
  ) : (
    <Redirect to="/login" />
  );
}

----

File: src/pages/Orders.js
Path: src/pages/Orders.js
Description: Page component for viewing and managing orders.  

import React, { useEffect, useState } from 'react';
import orderService from '../services/orderService';

export default function Orders() {
  const [orders, setOrders] = useState([]);

  useEffect(() => {
    orderService.getAll()
      .then(response => setOrders(response.data))
      .catch(error => console.error(error));  
  }, []);

  // Render list of orders

  return (
    <>
      <h1>Orders</h1>
      {/* Render orders */}
    </>
  );
}

----

File: src/services/api.js
Path: src/services/api.js  
Description: Axios instance pre-configured with API base URL and auth headers.

import axios from 'axios';

export default axios.create({
  baseURL: process.env.REACT_APP_API_URL,
  withCredentials: true,
});

----

File: src/services/orderService.js 
Path: src/services/orderService.js
Description: Service methods for performing CRUD operations on orders via API.

import api from './api';

export default {
  async getAll() {
    return api.get('/orders');
  },
  
  async get(id) {  
    return api.get(`/orders/${id}`);
  },
  
  async create(order) {
    return api.post('/orders', order);  
  },
  
  async update(order) {
    return api.put(`/orders/${order.id}`, order);
  },
  
  async remove(id) {  
    return api.delete(`/orders/${id}`);
  },
};

This covers the key parts of a basic React project structure with secure authentication and API integration. Additional components, pages, styling, error handling, etc would be added as the application is built out further. The API service methods handle the CRUD operations and the PrivateRoute component protects access to authenticated pages. Proper security measures like HTTPS, secure cookies, validation, rate limiting are assumed to be handled by the backend API.

Let me know if you would like me to expand on any part of the implementation!