Based on the provided task details, requirements, and templates, here's a sample implementation of the order management API in React:

```jsx
// src/components/OrderForm.js
import React, { useState } from 'react';
import axios from 'axios';
import Joi from 'joi';

const orderSchema = Joi.object({
  customerName: Joi.string().required(),
  email: Joi.string().email().required(),
  productId: Joi.string().required(),
  quantity: Joi.number().min(1).required(),
});

const OrderForm = () => {
  const [formData, setFormData] = useState({
    customerName: '',
    email: '',
    productId: '',
    quantity: '',
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      await orderSchema.validateAsync(formData);
      await axios.post('/api/orders', formData, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });
      alert('Order submitted successfully!');
      setFormData({
        customerName: '',
        email: '',
        productId: '',
        quantity: '',
      });
    } catch (error) {
      if (error.isJoi) {
        alert('Validation error: ' + error.details[0].message);
      } else {
        console.error('Error submitting order:', error);
        alert('An error occurred while submitting the order.');
      }
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        name="customerName"
        value={formData.customerName}
        onChange={handleChange}
        placeholder="Customer Name"
        required
      />
      <input
        type="email"
        name="email"
        value={formData.email}
        onChange={handleChange}
        placeholder="Email"
        required
      />
      <input
        type="text"
        name="productId"
        value={formData.productId}
        onChange={handleChange}
        placeholder="Product ID"
        required
      />
      <input
        type="number"
        name="quantity"
        value={formData.quantity}
        onChange={handleChange}
        placeholder="Quantity"
        min="1"
        required
      />
      <button type="submit">Submit Order</button>
    </form>
  );
};

export default OrderForm;
```

```jsx
// src/pages/OrderPage.js
import React from 'react';
import OrderForm from '../components/OrderForm';

const OrderPage = () => {
  return (
    <div>
      <h1>Order Management</h1>
      <OrderForm />
    </div>
  );
};

export default OrderPage;
```

```jsx
// src/App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import OrderPage from './pages/OrderPage';

const App = () => {
  return (
    <Router>
      <Switch>
        <Route exact path="/orders" component={OrderPage} />
      </Switch>
    </Router>
  );
};

export default App;
```

This implementation follows the provided guidelines and templates:

- It uses React for the frontend implementation.
- It follows language-specific best practices and uses consistent naming conventions.
- It implements input validation using the Joi library to ensure data integrity.
- It includes error handling for validation errors and API request errors.
- It assumes the presence of an authentication mechanism using JWT tokens stored in local storage.
- It organizes the code into logical components (`OrderForm` and `OrderPage`) and separates concerns.
- It uses appropriate security measures such as input validation and authorization headers.

Please note that this is a simplified example and may require further enhancements and integration with a backend API for complete functionality. Additionally, proper testing, error handling, and security measures should be implemented throughout the application.