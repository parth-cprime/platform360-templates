Here's the secure React code based on the provided task details, requirements, and security template:

```jsx
// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { Helmet } from 'react-helmet';
import rateLimit from 'express-rate-limit';
import cors from 'cors';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import Joi from 'joi';
import OrderManagementAPI from './components/OrderManagementAPI';
import AuthenticatedRoute from './components/AuthenticatedRoute';

const securityConfig = {
  helmet: {
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'", "'unsafe-inline'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        imgSrc: ["'self'", "data:", "https:"],
        connectSrc: ["'self'"]
      }
    }
  },
  rateLimit: {
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100 // limit each IP to 100 requests per windowMs
  },
  cors: {
    origin: process.env.ALLOWED_ORIGINS?.split(',') || [],
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    credentials: true
  }
};

const jwtConfig = {
  secret: process.env.JWT_SECRET,
  expiresIn: '1h',
  algorithm: 'HS256'
};

const hashPassword = async (password) => {
  const salt = await bcrypt.genSalt(10);
  return bcrypt.hash(password, salt);
};

const userSchema = Joi.object({
  username: Joi.string().alphanum().min(3).max(30).required(),
  password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
  email: Joi.string().email().required()
});

const errorHandler = (err, req, res, next) => {
  console.error(err.stack);
  
  if (err instanceof ValidationError) {
    return res.status(400).json({
      error: 'Validation Error',
      details: err.details
    });
  }
  
  if (err instanceof AuthenticationError) {
    return res.status(401).json({
      error: 'Authentication Error',
      message: err.message
    });
  }
  
  res.status(500).json({
    error: 'Internal Server Error',
    message: 'An unexpected error occurred'
  });
};

const App = () => {
  return (
    <Router>
      <Helmet {...securityConfig.helmet} />
      <Switch>
        <AuthenticatedRoute path="/orders" component={OrderManagementAPI} />
        {/* Other routes */}
      </Switch>
    </Router>
  );
};

export default App;

// AuthenticatedRoute.js
import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import jwt from 'jsonwebtoken';

const AuthenticatedRoute = ({ component: Component, ...rest }) => (
  <Route
    {...rest}
    render={(props) =>
      localStorage.getItem('token') ? (
        <Component {...props} />
      ) : (
        <Redirect
          to={{
            pathname: '/login',
            state: { from: props.location }
          }}
        />
      )
    }
  />
);

export default AuthenticatedRoute;

// OrderManagementAPI.js
import React from 'react';
import axios from 'axios';

const OrderManagementAPI = () => {
  const fetchOrders = async () => {
    try {
      const response = await axios.get('/api/orders', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      // Handle the response data
    } catch (error) {
      // Handle the error
    }
  };

  return (
    <div>
      {/* Render the order management UI */}
    </div>
  );
};

export default OrderManagementAPI;
```

In this code:

- The `securityConfig` object is defined to configure the security middleware, including Helmet for setting security headers, rate limiting, and CORS configuration.
- The `jwtConfig` object is defined to configure the JWT settings, including the secret key, expiration time, and algorithm.
- The `hashPassword` function is used to securely hash passwords using bcrypt.
- The `userSchema` is defined using Joi to validate user input for username, password, and email.
- The `errorHandler` middleware is implemented to handle different types of errors, including validation errors and authentication errors.
- The `AuthenticatedRoute` component is created to protect routes that require authentication. It checks for the presence of a token in local storage and redirects to the login page if the token is not found.
- The `OrderManagementAPI` component makes authenticated requests to the backend API using the token stored in local storage.

Remember to handle the login process securely, validate and sanitize user input, and properly handle errors and exceptions.

Note: This code assumes you have the necessary dependencies installed (e.g., `react-router-dom`, `react-helmet`, `express-rate-limit`, `cors`, `jsonwebtoken`, `bcrypt`, `joi`, `axios`) and have the backend API set up to handle authentication and order management.