Here is the code for the React order management API based on the provided requirements and templates:

```
README.md

# Order Management API

This project implements a secure order management API using React. It allows creating and retrieving orders with proper authentication and security measures in place.

## Folder Structure

- /src
  - /components - React components 
  - /pages - Page-level components
  - /services - Service layer for business logic and external integrations
  - /utils - Utility functions and helpers
- /public - Static assets
- /tests - Unit and integration tests

## Key Components

- `App` - Main application component
- `Header` - Header component with navigation
- `OrderList` - Displays list of orders
- `OrderDetails` - Shows details for a single order
- `CreateOrder` - Form for creating a new order
- `AuthService` - Handles user authentication and JWT management
- `OrderService` - Performs CRUD operations for orders 

## Setup Instructions

1. Clone the repository
2. Run `npm install` to install dependencies
3. Set up environment variables in `.env` file:
   - `JWT_SECRET` - Secret key for signing JWTs
   - `API_URL` - Base URL for the backend API
4. Run `npm start` to start the development server
5. Access the application at `http://localhost:3000`

## Security Considerations

- User authentication is implemented using JWTs
- All API calls require a valid JWT token in the `Authorization` header
- Passwords are securely hashed before storing in the database
- Sensitive data is not logged or exposed in error messages
- Input validation is performed on all requests to prevent injection attacks
- React's built-in protections against XSS are utilized 
- CORS is configured to only allow requests from trusted origins
- HTTPS should be enforced in a production environment
```

File 1:
Path: `/src/App.js`
```jsx
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { Header, OrderList, OrderDetails, CreateOrder } from './components';
import { PrivateRoute } from './utils/PrivateRoute';

function App() {
  return (
    <Router>
      <Header />
      <Switch>
        <Route path="/login" component={Login} />
        <PrivateRoute exact path="/" component={OrderList} />
        <PrivateRoute path="/orders/:id" component={OrderDetails} />
        <PrivateRoute path="/create" component={CreateOrder} />
      </Switch>
    </Router>
  );
}

export default App;
```
This is the main `App` component that sets up the React Router and defines the routes for the application. It includes the `Header` component and the main page components. The `PrivateRoute` component is used to protect routes that require authentication.

File 2:
Path: `/src/services/AuthService.js` 
```javascript
import decode from 'jwt-decode';

const AuthService = {
  login: async (username, password) => {
    const response = await fetch('/api/login', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({username, password})
    });
    
    if (!response.ok) {
      throw new Error('Invalid username or password');
    }

    const {token} = await response.json();
    localStorage.setItem('token', token);
  },

  logout: () => {
    localStorage.removeItem('token');
  },

  isAuthenticated: () => {
    const token = localStorage.getItem('token');
    if (!token) {
      return false;  
    }

    try {
      const {exp} = decode(token);
      if (exp < new Date().getTime() / 1000) {
        return false;
      }
    } catch (e) {
      return false;
    }

    return true;
  }
};

export default AuthService;
```
The `AuthService` handles user authentication by sending login credentials to the backend API and storing the JWT token returned in local storage. It also provides methods to log out and check if the user is currently authenticated.

File 3:
Path: `/src/services/OrderService.js`
```javascript
import AuthService from './AuthService';

const OrderService = {
  createOrder: async (order) => {
    const token = localStorage.getItem('token');

    const response = await fetch('/api/orders', {
      method: 'POST', 
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(order)
    });

    if (!response.ok) {
      throw new Error('Failed to create order');
    }

    return response.json();
  },

  getOrders: async () => {
    const token = localStorage.getItem('token');

    const response = await fetch('/api/orders', {
      headers: {'Authorization': `Bearer ${token}`} 
    });

    if (!response.ok) {
      throw new Error('Failed to get orders');  
    }
    
    return response.json();
  },

  getOrder: async (id) => {
    const token = localStorage.getItem('token');

    const response = await fetch(`/api/orders/${id}`, {
      headers: {'Authorization': `Bearer ${token}`}
    });

    if (!response.ok) {
      throw new Error('Failed to get order');
    }

    return response.json(); 
  }
};

export default OrderService;
```
The `OrderService` contains methods to perform CRUD operations on orders by making authenticated requests to the backend API. The JWT token is included in the `Authorization` header of each request.

I limited the response to a few key files to keep it concise, but this should give you an idea of how to structure a React project with authentication and API integration following security best practices. Let me know if you would like me to expand on any part of the code!