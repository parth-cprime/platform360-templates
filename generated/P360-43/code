Based on the provided task details, requirements, and security template, here's the secure code for the order management API:

```java
// SecurityConfig.java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeRequests()
            .antMatchers("/api/public/**").permitAll()
            .antMatchers("/api/orders/**").authenticated()
            .and()
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .addFilter(new JwtAuthenticationFilter(authenticationManager()));
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

// JwtTokenProvider.java
@Component
public class JwtTokenProvider {
    
    private final String jwtSecret = "your-secret-key";
    private final long jwtExpirationInMs = 86400000; // 24 hours
    
    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("roles", userDetails.getAuthorities());
        
        return Jwts.builder()
            .setClaims(claims)
            .setSubject(userDetails.getUsername())
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationInMs))
            .signWith(SignatureAlgorithm.HS512, jwtSecret)
            .compact();
    }
}

// OrderController.java
@RestController
@RequestMapping("/api/orders")
public class OrderController {
    
    @PostMapping
    public ResponseEntity<?> createOrder(@Valid @RequestBody OrderDTO orderDTO) {
        // Implementation for creating an order
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<?> getOrderById(@PathVariable Long id) {
        // Implementation for retrieving an order by ID
    }
    
    // Other order management endpoints
}

// OrderDTO.java
public class OrderDTO {
    @NotNull(message = "Customer ID is required")
    private Long customerId;
    
    @NotEmpty(message = "Order items cannot be empty")
    private List<OrderItemDTO> items;
    
    @NotNull(message = "Order date is required")
    private Date orderDate;
    
    // Getters and setters
}

// OrderItemDTO.java
public class OrderItemDTO {
    @NotNull(message = "Product ID is required")
    private Long productId;
    
    @Min(value = 1, message = "Quantity must be at least 1")
    private Integer quantity;
    
    // Getters and setters
}

// GlobalExceptionHandler.java
@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<ErrorResponse> handleValidationException(ValidationException ex) {
        ErrorResponse error = new ErrorResponse(
            "Validation Error",
            ex.getMessage(),
            HttpStatus.BAD_REQUEST
        );
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }
    
    @ExceptionHandler(AuthenticationException.class)
    public ResponseEntity<ErrorResponse> handleAuthenticationException(AuthenticationException ex) {
        ErrorResponse error = new ErrorResponse(
            "Authentication Error",
            ex.getMessage(),
            HttpStatus.UNAUTHORIZED
        );
        return new ResponseEntity<>(error, HttpStatus.UNAUTHORIZED);
    }
}
```

This code incorporates the following security measures:

1. The `SecurityConfig` class configures the security settings, enabling JWT authentication and allowing public access to `/api/public/**` endpoints while requiring authentication for `/api/orders/**` endpoints.

2. The `JwtTokenProvider` class handles the generation of JWT tokens using a secret key and an expiration time of 24 hours.

3. The `OrderController` class defines the endpoints for order management operations, such as creating an order and retrieving an order by ID. The endpoints use `@Valid` annotation to validate the input data.

4. The `OrderDTO` and `OrderItemDTO` classes represent the data transfer objects for orders and order items, respectively. They include validation annotations to ensure data integrity.

5. The `GlobalExceptionHandler` class handles exceptions related to validation and authentication, providing appropriate error responses.

Please note that this is a simplified example and additional security measures, such as input sanitization, secure communication (HTTPS), and proper authorization checks, should be implemented in a production environment.