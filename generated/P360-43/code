Here is the generated secure, well-structured code for the order management API based on the provided task details, requirements, and templates:

1. README.md

```markdown
# Order Management API

This project implements an Order Management API using Node.js. It provides endpoints for managing orders and includes security features such as JWT authentication, rate limiting, and input validation.

## Folder Structure

- `src/`: Contains the main source code
  - `controllers/`: API route handlers
  - `middlewares/`: Custom middleware functions
  - `models/`: Data models and schemas
  - `routes/`: API route definitions
  - `services/`: Business logic and data access
  - `utils/`: Utility functions
  - `app.js`: Main application entry point
  - `config.js`: Configuration settings
- `tests/`: Contains test files
- `package.json`: Project dependencies and scripts
- `.env`: Environment variables

## Key Components

- `app.js`: Sets up the Express application, middleware, and routes
- `controllers/`: Defines the API route handlers
- `middlewares/`: Implements custom middleware for authentication, error handling, etc.
- `models/`: Defines the data models and schemas using Mongoose
- `routes/`: Defines the API routes and maps them to the corresponding controllers
- `services/`: Contains the business logic and data access functions
- `utils/`: Provides utility functions for tasks like password hashing and token generation

## Setup Instructions

1. Clone the repository
2. Install dependencies: `npm install`
3. Set up environment variables in `.env` file
4. Start the server: `npm start`
5. Run tests: `npm test`

## Security Considerations

- JWT authentication is used to secure the API endpoints
- Rate limiting middleware is implemented to prevent abuse
- Input validation is performed using Joi schemas
- Passwords are hashed using bcrypt before storing them in the database
- CORS is configured to restrict access to allowed origins
- Helmet middleware is used to add security headers
```

2. File Structure and Content

2.1 `src/app.js`
```javascript
const express = require('express');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const cors = require('cors');
const morgan = require('morgan');
const config = require('./config');
const routes = require('./routes');
const errorHandler = require('./middlewares/errorHandler');

const app = express();

// Security middleware
app.use(helmet(config.securityConfig.helmet));
app.use(rateLimit(config.securityConfig.rateLimit));
app.use(cors(config.securityConfig.cors));

// Logging middleware
app.use(morgan('combined'));

// Parse JSON request bodies
app.use(express.json());

// API routes
app.use('/api', routes);

// Error handling middleware
app.use(errorHandler);

module.exports = app;
```
Purpose: Main application entry point that sets up the Express app, middleware, and routes.

2.2 `src/config.js`
```javascript
require('dotenv').config();

module.exports = {
  port: process.env.PORT || 3000,
  db: {
    uri: process.env.DB_URI,
  },
  securityConfig: {
    helmet: {
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          scriptSrc: ["'self'", "'unsafe-inline'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          imgSrc: ["'self'", "data:", "https:"],
          connectSrc: ["'self'"],
        },
      },
    },
    rateLimit: {
      windowMs: 15 * 60 * 1000, // 15 minutes
      max: 100, // limit each IP to 100 requests per windowMs
    },
    cors: {
      origin: process.env.ALLOWED_ORIGINS?.split(',') || [],
      methods: ['GET', 'POST', 'PUT', 'DELETE'],
      credentials: true,
    },
  },
  jwtConfig: {
    secret: process.env.JWT_SECRET,
    expiresIn: '1h',
    algorithm: 'HS256',
  },
};
```
Purpose: Configuration settings for the application, including security middleware options and database connection.

2.3 `src/controllers/orderController.js`
```javascript
const OrderService = require('../services/orderService');

exports.createOrder = async (req, res, next) => {
  try {
    const order = await OrderService.createOrder(req.body);
    res.status(201).json(order);
  } catch (error) {
    next(error);
  }
};

exports.getOrders = async (req, res, next) => {
  try {
    const orders = await OrderService.getOrders();
    res.json(orders);
  } catch (error) {
    next(error);
  }
};

exports.getOrderById = async (req, res, next) => {
  try {
    const order = await OrderService.getOrderById(req.params.id);
    if (!order) {
      return res.status(404).json({ error: 'Order not found' });
    }
    res.json(order);
  } catch (error) {
    next(error);
  }
};
```
Purpose: Defines the API route handlers for order-related operations.

2.4 `src/middlewares/authMiddleware.js`
```javascript
const jwt = require('jsonwebtoken');
const config = require('../config');

exports.authenticate = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) {
    return res.status(401).json({ error: 'No token provided' });
  }

  try {
    const decoded = jwt.verify(token, config.jwtConfig.secret);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Invalid token' });
  }
};
```
Purpose: Middleware function to authenticate requests using JWT.

2.5 `src/middlewares/errorHandler.js`
```javascript
const { ValidationError } = require('joi');
const { AuthenticationError } = require('../utils/errors');
const logger = require('../utils/logger');

module.exports = (err, req, res, next) => {
  logger.error(err.stack);

  if (err instanceof ValidationError) {
    return res.status(400).json({
      error: 'Validation Error',
      details: err.details,
    });
  }

  if (err instanceof AuthenticationError) {
    return res.status(401).json({
      error: 'Authentication Error',
      message: err.message,
    });
  }

  res.status(500).json({
    error: 'Internal Server Error',
    message: 'An unexpected error occurred',
  });
};
```
Purpose: Error handling middleware to handle and format different types of errors.

2.6 `src/models/order.js`
```javascript
const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema(
  {
    customerName: {
      type: String,
      required: true,
    },
    items: [
      {
        productId: {
          type: mongoose.Schema.Types.ObjectId,
          ref: 'Product',
          required: true,
        },
        quantity: {
          type: Number,
          required: true,
          min: 1,
        },
      },
    ],
    total: {
      type: Number,
      required: true,
      min: 0,
    },
  },
  {
    timestamps: true,
  }
);

module.exports = mongoose.model('Order', orderSchema);
```
Purpose: Defines the Order data model using Mongoose schema.

2.7 `src/routes/index.js`
```javascript
const express = require('express');
const orderRoutes = require('./orderRoutes');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

router.use('/orders', authMiddleware.authenticate, orderRoutes);

module.exports = router;
```
Purpose: Defines the main API routes and maps them to the corresponding sub-routes.

2.8 `src/routes/orderRoutes.js`
```javascript
const express = require('express');
const orderController = require('../controllers/orderController');

const router = express.Router();

router.post('/', orderController.createOrder);
router.get('/', orderController.getOrders);
router.get('/:id', orderController.getOrderById);

module.exports = router;
```
Purpose: Defines the order-related API routes and maps them to the corresponding controller functions.

2.9 `src/services/orderService.js`
```javascript
const Order = require('../models/order');
const { ValidationError } = require('joi');
const { orderSchema } = require('../utils/validation');

exports.createOrder = async (orderData) => {
  const { error } = orderSchema.validate(orderData);
  if (error) {
    throw new ValidationError(error.details);
  }

  const order = new Order(orderData);
  return order.save();
};

exports.getOrders = async () => {
  return Order.find();
};

exports.getOrderById = async (orderId) => {
  return Order.findById(orderId);
};
```
Purpose: Contains the business logic and data access functions for order-related operations.

2.10 `src/utils/errors.js`
```javascript
class AuthenticationError extends Error {
  constructor(message) {
    super(message);
    this.name = 'AuthenticationError';
  }
}

module.exports = {
  AuthenticationError,
};
```
Purpose: Defines custom error classes for specific error types.

2.11 `src/utils/logger.js`
```javascript
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  defaultMeta: { service: 'order-management-api' },
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

module.exports = logger;
```
Purpose: Configures and exports a logger using the Winston library.

2.12 `src/utils/validation.js`
```javascript
const Joi = require('joi');

exports.orderSchema = Joi.object({
  customerName: Joi.string().required(),
  items: Joi.array()
    .items(
      Joi.object({
        productId: Joi.string().required(),
        quantity: Joi.number().min(1).required(),
      })
    )
    .required(),
  total: Joi.number().min(0).required(),
});
```
Purpose: Defines validation schemas using Joi for validating request data.

This generated code provides a secure and well-structured implementation of an Order Management API using Node.js. It follows best practices for code organization, security, and validation.

Note: The code assumes the existence of certain dependencies and environment variables. Make sure to install the required dependencies and set up the necessary environment variables before running the application.