describe('Order Controller', () => {
  let token;

  beforeAll(() => {
    token = generateToken('test-user-id');
  });

  afterEach(async () => {
    await Order.deleteMany();
  });

  it('should create a new order', async () => {
    const order = {
      customerId: 'test-customer-id',
      products: [
        { productId: 'test-product-id-1', quantity: 2 },
        { productId: 'test-product-id-2', quantity: 1 },
      ],
    };

    const response = await request(app)
      .post('/api/orders')
      .set('Authorization', token)
      .send(order)
      .expect(201);

    expect(response.body.customerId).toBe(order.customerId);
    expect(response.body.products).toHaveLength(2);
  });

  it('should get an order by ID', async () => {
    const createdOrder = await Order.create({
      customerId: 'test-customer-id',
      products: [{ productId: 'test-product-id', quantity: 1 }],
      totalAmount: 100,
    });

    const response = await request(app)
      .get(`/api/orders/${createdOrder._id}`)
      .set('Authorization', token)
      .expect(200);

    expect(response.body._id).toBe(createdOrder._id.toString());
    expect(response.body.customerId).toBe(createdOrder.customerId);
  });
});
```
Description: The `orderController.test.js` file contains unit tests for the order controller. It uses the `supertest` library to make HTTP requests to the API endpoints and asserts the expected responses.