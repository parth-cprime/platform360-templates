Based on the provided information, here is a secure React code implementation that addresses the security requirements and considers the user experience insights:

```jsx
// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import PrivateRoute from './components/PrivateRoute';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import NotFound from './pages/NotFound';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/" element={<PrivateRoute component={Dashboard} />} />
          <Route path="*" element={<NotFound />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;

// AuthContext.js
import React, { createContext, useState } from 'react';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const login = async (credentials) => {
    // Perform OAuth authentication
    // Set isAuthenticated to true on successful login
    // Handle errors securely
  };

  const logout = () => {
    // Clear authentication state
    setIsAuthenticated(false);
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;

// PrivateRoute.js
import React, { useContext } from 'react';
import { Navigate } from 'react-router-dom';
import AuthContext from '../contexts/AuthContext';

const PrivateRoute = ({ component: Component, ...rest }) => {
  const { isAuthenticated } = useContext(AuthContext);

  return isAuthenticated ? <Component {...rest} /> : <Navigate to="/login" />;
};

export default PrivateRoute;
```

Security Controls:
1. Input Validation:
   - Implement proper input validation and sanitization for user inputs.
   - Use secure libraries for parsing and validating data.
2. Authentication:
   - Implement OAuth authentication using a trusted OAuth provider.
   - Securely store and handle authentication tokens.
3. Authorization:
   - Use `PrivateRoute` component to protect authenticated routes.
   - Implement role-based access control if required.
4. Session Management:
   - Use secure session management techniques, such as token-based authentication.
   - Implement secure session handling and logout functionality.
5. Data Protection:
   - Encrypt sensitive data in transit and at rest.
   - Use secure storage mechanisms for handling sensitive data.
6. Error Handling:
   - Implement proper error handling and avoid exposing sensitive information in error messages.
   - Log errors securely for debugging purposes.
7. Logging:
   - Implement secure logging mechanisms to track important events and actions.
   - Ensure logs do not contain sensitive information.
8. API Security:
   - Implement secure API endpoints with proper authentication and authorization.
   - Use secure communication protocols (e.g., HTTPS) for API requests.
9. Dependency Security:
   - Keep dependencies up to date and use secure versions.
   - Regularly audit and update dependencies to address any security vulnerabilities.
10. Infrastructure Security:
    - Deploy the application on a secure infrastructure with proper security configurations.
    - Implement necessary security measures at the infrastructure level.

Security Configuration:
- Configure proper CORS settings to restrict cross-origin requests.
- Configure CSP (Content Security Policy) headers to mitigate XSS and other attacks.
- Configure secure HTTP headers, such as HSTS, X-Frame-Options, X-XSS-Protection, etc.

Security Documentation:
- Document the security controls implemented in the application.
- Provide guidelines for secure usage and configuration of the application.
- Include security best practices for developers and administrators.

Security Testing Plan:
- Perform regular security testing, including penetration testing and vulnerability assessments.
- Conduct code reviews to identify and address security issues.
- Implement automated security testing as part of the CI/CD pipeline.

Addressing User Experience Issues:
- Investigate and fix the cause of dead clicks to improve user experience.
- Optimize the application to reduce friction and improve overall experience score.
- Analyze sessions with lowest experience scores to identify and address specific issues.
- Use the provided heatmap URL to gain insights into user behavior and optimize the UI accordingly.

Note: The provided code snippets are a starting point and may require further customization based on the specific requirements of the application. It's important to thoroughly test and validate the security controls implemented to ensure they meet the required security level and protect sensitive data appropriately.