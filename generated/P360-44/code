Based on the provided task details, requirements, and security template, here's a sample secure code implementation in React using JWT authentication:

```jsx
// AuthContext.js
import React, { createContext, useState, useEffect } from 'react';
import jwt from 'jsonwebtoken';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [token, setToken] = useState(null);
  const [user, setUser] = useState(null);

  useEffect(() => {
    // Check if token exists in local storage
    const storedToken = localStorage.getItem('token');
    if (storedToken) {
      setToken(storedToken);
      // Decode token to get user information
      const decodedUser = jwt.decode(storedToken);
      setUser(decodedUser);
    }
  }, []);

  const login = (token) => {
    setToken(token);
    // Store token in local storage
    localStorage.setItem('token', token);
    // Decode token to get user information
    const decodedUser = jwt.decode(token);
    setUser(decodedUser);
  };

  const logout = () => {
    setToken(null);
    setUser(null);
    // Remove token from local storage
    localStorage.removeItem('token');
  };

  return (
    <AuthContext.Provider value={{ token, user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// ProtectedRoute.js
import React, { useContext } from 'react';
import { Route, Redirect } from 'react-router-dom';
import { AuthContext } from './AuthContext';

export const ProtectedRoute = ({ component: Component, ...rest }) => {
  const { token } = useContext(AuthContext);

  return (
    <Route
      {...rest}
      render={(props) =>
        token ? <Component {...props} /> : <Redirect to="/login" />
      }
    />
  );
};

// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { AuthProvider } from './AuthContext';
import { ProtectedRoute } from './ProtectedRoute';
import Login from './Login';
import Home from './Home';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Switch>
          <Route exact path="/login" component={Login} />
          <ProtectedRoute exact path="/" component={Home} />
        </Switch>
      </Router>
    </AuthProvider>
  );
}

export default App;
```

In this code:

1. The `AuthContext` is created using the `createContext` function from React. It provides a way to share authentication-related data across components.

2. The `AuthProvider` component manages the authentication state, including the token and user information. It checks for a stored token in local storage on component mount and updates the state accordingly. It also provides `login` and `logout` functions to update the authentication state.

3. The `ProtectedRoute` component is a wrapper around the `Route` component from React Router. It checks if a token exists in the `AuthContext`. If a token is present, it renders the specified component; otherwise, it redirects the user to the login page.

4. The `App` component sets up the routing using React Router. It wraps the routes with the `AuthProvider` to make the authentication state available to all components. The `/login` route is public, while the `/` route is protected using the `ProtectedRoute` component.

To ensure security:
- The token is stored securely in local storage.
- The token is decoded to get user information, which can be used to