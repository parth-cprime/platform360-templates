Based on the provided task details, requirements, and security template, here's a secure code implementation for the React marketing page:

```jsx
// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { Helmet } from 'react-helmet';
import rateLimit from 'express-rate-limit';
import cors from 'cors';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import Joi from 'joi';
import logger from './logger';
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import NotFoundPage from './pages/NotFoundPage';

const App = () => {
  // Security middleware configuration
  const securityConfig = {
    helmet: {
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          scriptSrc: ["'self'", "'unsafe-inline'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          imgSrc: ["'self'", "data:", "https:"],
          connectSrc: ["'self'"]
        }
      }
    },
    rateLimit: {
      windowMs: 15 * 60 * 1000, // 15 minutes
      max: 100 // limit each IP to 100 requests per windowMs
    },
    cors: {
      origin: process.env.ALLOWED_ORIGINS?.split(',') || [],
      methods: ['GET', 'POST', 'PUT', 'DELETE'],
      credentials: true
    }
  };

  // JWT Authentication
  const jwtConfig = {
    secret: process.env.JWT_SECRET,
    expiresIn: '1h',
    algorithm: 'HS256'
  };

  // Password hashing
  const hashPassword = async (password) => {
    const salt = await bcrypt.genSalt(10);
    return bcrypt.hash(password, salt);
  };

  // Input validation schema
  const userSchema = Joi.object({
    username: Joi.string().alphanum().min(3).max(30).required(),
    password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
    email: Joi.string().email().required()
  });

  // Error handling middleware
  const errorHandler = (err, req, res, next) => {
    logger.error(err.stack);

    if (err instanceof ValidationError) {
      return res.status(400).json({
        error: 'Validation Error',
        details: err.details
      });
    }

    if (err instanceof AuthenticationError) {
      return res.status(401).json({
        error: 'Authentication Error',
        message: err.message
      });
    }

    res.status(500).json({
      error: 'Internal Server Error',
      message: 'An unexpected error occurred'
    });
  };

  return (
    <Router>
      <Helmet>
        <title>Product/Service Name</title>
        <meta name="description" content="High-converting marketing page for Product/Service Name" />
      </Helmet>
      <Switch>
        <Route exact path="/" component={HomePage} />
        <Route path="/login" component={LoginPage} />
        <Route component={NotFoundPage} />
      </Switch>
    </Router>
  );
};

export default App;
```

In this code:

1. The `securityConfig` object is defined with the specified security middleware configurations, including Content Security Policy (CSP) directives, rate limiting, and CORS settings.

2. The `jwtConfig` object is defined with the JWT secret, expiration time, and algorithm.

3. The `hashPassword` function is implemented using bcrypt to securely hash passwords before storing them.

4. The `userSchema` is defined using Joi for input validation of user data, ensuring that the required fields are provided and meet the specified criteria.

5. The `errorHandler` middleware is implemented to handle different types of errors, including validation errors and authentication errors, and return appropriate error responses.

6. The React application is set up using React Router for navigation, with routes defined for the home page, login page, and a not found page.

7. The `Helmet` component is used to set the page title and meta description for SEO purposes.

Remember to handle user authentication securely on the server-side, protect sensitive data, and follow secure coding practices throughout your application.

Note: This code assumes the existence of separate files for `logger`, `HomePage`, `LoginPage`, and `NotFoundPage` components, which you would need to create and implement accordingly.