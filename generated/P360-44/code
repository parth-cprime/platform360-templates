Here is a secure React code outline based on the provided details and template:

```jsx
// Implement secure input validation
function validateInput(input) {
  // Sanitize and validate input fields
  // Reject invalid or malicious input
  // Enforce strict validation rules
  // Use allowlists over blocklists
}

// Implement secure authentication using JWT
function authenticateUser(username, password) {
  // Validate credentials against user store
  // Generate and return signed JWT with limited expiration
  // Require re-authentication after token expiry
  // Secure token storage on client-side
  // Implement logout to revoke token
}

// Implement granular authorization checks
function isAuthorized(user, action) {
  // Check user permissions for the requested action
  // Enforce principle of least privilege 
  // Deny access by default
}

// Protect sensitive internal data
function encryptSensitiveData(data) {
  // Classify data sensitivity levels
  // Encrypt sensitive data at rest and in transit
  // Use strong, vetted encryption algorithms
  // Securely manage encryption keys
  // Minimize exposure of sensitive data
}

// Implement secure session management 
function createSecureSession(user) {
  // Generate new session upon login
  // Secure session cookies (httpOnly, secure, sameSite)
  // Regenerate session ID periodically and upon privilege change
  // Implement absolute and idle session timeouts
}

// Prevent exposure of system details in errors
function handleError(error) {
  // Log detailed error messages on backend only
  // Display generic error messages to users
  // Avoid exposing system internals in errors
}

// Log security events for monitoring 
function logSecurityEvent(event) {
  // Log authentication attempts, failures, lockouts
  // Log access control failures
  // Log input validation failures
  // Include contextual information in logs
  // Protect logs from unauthorized access
}

// Implement secure communication with backend APIs
function callAPI(endpoint, data) {
  // Authenticate requests using JWT bearer token
  // Validate response data format and content
  // Reject responses not over TLS
}

// Audit and update insecure dependencies
function checkDependencies() {
  // Use tools to scan for vulnerable dependencies 
  // Upgrade to patched dependency versions
  // Monitor for new vulnerabilities in used libraries
}

// Harden infrastructure and configurations
function secureInfrastructure() {
  // Deploy in secure cloud or on-prem environment
  // Secure configurations for web server, database, etc.
  // Keep systems and software patched and up-to-date
  // Restrict access and disable unused services/ports
}
```

Additional considerations:
- Use React features like Content Security Policy and server-side rendering to enhance security
- Follow React DOM manipulation best practices and use safe APIs 
- Use React-recommended secure auth patterns and libraries when possible
- Implement logout across tabs/windows and limit concurrent sessions
- Consider security headers like HSTS, X-Frame-Options, X-Content-Type-Options
- Perform static code scans, dynamic scans, and manual pentesting
- Address UX metrics by streamlining auth flow and validating input in real-time
- Provide clear messages to guide users, handle errors gracefully

I recommend elaborating on each section to build out a complete and secure React implementation. Further customize the code to your specific application and security requirements. Ensure thorough testing and incorporate feedback from security audits.