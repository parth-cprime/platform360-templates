import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import config from '../config';

class AuthService {
  static async login(username, password) {
    // Simulated user retrieval from database
    const user = { 
      id: 1,
      username: 'admin',
      password: '$2a$10$5Ck.6V7NubxK8v6WTiYiTO7sBRY6ZsTcngUa3rIe/qY4s2qDEE1Tm' // hashed password: 'password'
    };

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      throw new Error('Invalid username or password');
    }

    const token = jwt.sign({ sub: user.id }, config.jwtSecret);
    return token;
  }

  static isAuthenticated() {
    const token = localStorage.getItem('token');
    if (!token) {
      return false;
    }

    try {
      jwt.verify(token, config.jwtSecret);
      return true;
    } catch (err) {
      return false; 
    }
  }
}

export default AuthService;
