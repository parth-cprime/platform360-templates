// server.js
const express = require('express');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const Joi = require('joi');
const logger = require('./logger');

const app = express();

// Security middleware configuration
const securityConfig = {
    helmet: {
        contentSecurityPolicy: {
            directives: {
                defaultSrc: ["'self'"],
                scriptSrc: ["'self'", "'unsafe-inline'"],
                styleSrc: ["'self'", "'unsafe-inline'"],
                imgSrc: ["'self'", "data:", "https:"],
                connectSrc: ["'self'"]
            }
        }
    },
    rateLimit: {
        windowMs: 15 * 60 * 1000, // 15 minutes
        max: 100 // limit each IP to 100 requests per windowMs
    },
    cors: {
        origin: process.env.ALLOWED_ORIGINS?.split(',') || [],
        methods: ['GET', 'POST', 'PUT', 'DELETE'],
        credentials: true
    }
};

// Apply security middleware
app.use(helmet(securityConfig.helmet));
app.use(rateLimit(securityConfig.rateLimit));
app.use(cors(securityConfig.cors));

// JWT Authentication
const jwtConfig = {
    secret: process.env.JWT_SECRET,
    expiresIn: '1h',
    algorithm: 'HS256'
};

// Password hashing
const hashPassword = async (password) => {
    const salt = await bcrypt.genSalt(10);
    return bcrypt.hash(password, salt);
};

// Input validation schema
const orderSchema = Joi.object({
    customerId: Joi.string().required(),
    productId: Joi.string().required(),
    quantity: Joi.number().integer().min(1).required(),
    // Add more fields as per your order schema
});

// Error handling middleware
const errorHandler = (err, req, res, next) => {
    logger.error(err.stack);
    
    if (err instanceof Joi.ValidationError) {
        return res.status(400).json({
            error: 'Validation Error',
            details: err.details
        });
    }
    
    if (err instanceof jwt.JsonWebTokenError) {
        return res.status(401).json({
            error: 'Authentication Error',
            message: 'Invalid token'
        });
    }
    
    res.status(500).json({
        error: 'Internal Server Error',
        message: 'An unexpected error occurred'
    });
};

// Order management API routes
app.post('/orders', async (req, res, next) => {
    try {
        const { error } = orderSchema.validate(req.body);
        if (error) {
            throw new Joi.ValidationError(error.details);
        }
        
        // Process the order
        // ...
        
        res.status(201).json({ message: 'Order created successfully' });
    } catch (error) {
        next(error);
    }
});

// Add more routes for order management

app.use(errorHandler);

// Start the server
app.listen(process.env.PORT, () => {
    console.log(`Server is running on port ${process.env.PORT}`);
});
