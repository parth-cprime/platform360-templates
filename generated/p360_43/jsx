// OrderAPI.js
import axios from 'axios';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import Joi from 'joi';
import { ValidationError, AuthenticationError } from './errors';
import logger from './logger';

// Security configuration
const securityConfig = {
    helmet: {
        contentSecurityPolicy: {
            directives: {
                defaultSrc: ["'self'"],
                scriptSrc: ["'self'", "'unsafe-inline'"],
                styleSrc: ["'self'", "'unsafe-inline'"],
                imgSrc: ["'self'", "data:", "https:"],
                connectSrc: ["'self'"]
            }
        }
    },
    rateLimit: {
        windowMs: 15 * 60 * 1000, // 15 minutes
        max: 100 // limit each IP to 100 requests per windowMs
    },
    cors: {
        origin: process.env.ALLOWED_ORIGINS?.split(',') || [],
        methods: ['GET', 'POST', 'PUT', 'DELETE'],
        credentials: true
    }
};

// JWT authentication configuration
const jwtConfig = {
    secret: process.env.JWT_SECRET,
    expiresIn: '1h',
    algorithm: 'HS256'
};

// Password hashing
const hashPassword = async (password) => {
    const salt = await bcrypt.genSalt(10);
    return bcrypt.hash(password, salt);
};

// Input validation schema
const orderSchema = Joi.object({
    customerName: Joi.string().required(),
    orderItems: Joi.array().items(
        Joi.object({
            productId: Joi.string().required(),
            quantity: Joi.number().integer().min(1).required()
        })
    ).required(),
    shippingAddress: Joi.string().required()
});

// Error handling middleware
const errorHandler = (err, req, res, next) => {
    logger.error(err.stack);
    
    if (err instanceof ValidationError) {
        return res.status(400).json({
            error: 'Validation Error',
            details: err.details
        });
    }
    
    if (err instanceof AuthenticationError) {
        return res.status(401).json({
            error: 'Authentication Error',
            message: err.message
        });
    }
    
    res.status(500).json({
        error: 'Internal Server Error',
        message: 'An unexpected error occurred'
    });
};

// Order API
const OrderAPI = {
    async createOrder(orderData, token) {
        try {
            // Validate input data
            const { error } = orderSchema.validate(orderData);
            if (error) {
                throw new ValidationError(error.details);
            }
            
            // Verify JWT token
            const decodedToken = jwt.verify(token, jwtConfig.secret);
            
            // Create order
            const response = await axios.post('/api/orders', orderData, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            return response.data;
        } catch (error) {
            if (error instanceof jwt.JsonWebTokenError) {
                throw new AuthenticationError('Invalid token');
            }
            throw error;
        }
    },
    
    // Other order-related methods...
};

export default OrderAPI;
