// React Security Code Generation Prompt

// Application Type: Web Application
// Security Level: High
// Authentication Method: JWT
// Data Sensitivity: PII

// Input Validation
import validator from 'validator';

// Validate user input
function validateInput(input) {
  if (!validator.isAlphanumeric(input)) {
    throw new Error('Invalid input');
  }
}

// Authentication
import jwt from 'jsonwebtoken';

// Generate JWT token
function generateToken(user) {
  const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });
  return token;
}

// Verify JWT token
function verifyToken(token) {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    return decoded;
  } catch (err) {
    throw new Error('Invalid token');
  }
}

// Authorization
// Define user roles and permissions
const roles = {
  admin: ['read', 'write', 'delete'],
  user: ['read'],
};

// Check user authorization
function isAuthorized(user, action) {
  const userRoles = roles[user.role];
  return userRoles && userRoles.includes(action);
}

// Session Management
// Use secure session cookies
const sessionOptions = {
  httpOnly: true,
  secure: true,
  sameSite: 'strict',
};

// Data Protection
import crypto from 'crypto';

// Encrypt sensitive data
function encryptData(data) {
  const cipher = crypto.createCipher('aes-256-cbc', process.env.ENCRYPTION_KEY);
  let encryptedData = cipher.update(data, 'utf8', 'hex');
  encryptedData += cipher.final('hex');
  return encryptedData;
}

// Decrypt sensitive data
function decryptData(encryptedData) {
  const decipher = crypto.createDecipher('aes-256-cbc', process.env.ENCRYPTION_KEY);
  let decryptedData = decipher.update(encryptedData, 'hex', 'utf8');
  decryptedData += decipher.final('utf8');
  return decryptedData;
}

// Error Handling
// Handle errors securely
function handleError(err, res) {
  console.error(err);
  res.status(500).json({ error: 'Internal Server Error' });
}

// Logging
import winston from 'winston';

// Configure secure logging
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' }),
  ],
});

// API Security
// Implement rate limiting
import rateLimit from 'express-rate-limit';

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
});

app.use(limiter);

// Dependency Security
// Use secure dependencies and keep them up to date
// Regularly check for vulnerabilities in dependencies

// Infrastructure Security
// Use secure hosting and infrastructure
// Implement firewall rules and network security measures
// Keep systems and software up to date

// Security Testing
// Perform regular security testing
// Conduct penetration testing and vulnerability scans
// Implement automated security testing in CI/CD pipeline

// Security Documentation
// Document security controls and practices
// Provide security training to developers
// Maintain incident response plan

// This code snippet demonstrates some of the key security controls and practices that should be implemented in a React application with a high security level, JWT authentication, and PII data sensitivity. It covers input validation, authentication using JWT, authorization based on user roles, secure session management, data encryption, secure error handling, logging, API rate limiting, and secure infrastructure practices.

// Remember to adapt and extend this code based on your specific application requirements and security needs. Regularly review and update security controls, perform thorough testing, and stay informed about the latest security best practices and vulnerabilities.
