# Order Management API

This project implements an Order Management API that allows creating, retrieving, updating, and deleting orders. It follows Java best practices and includes security features such as JWT authentication and input validation.

## Folder Structure

- `src/main/java`: Contains the Java source code
  - `com.example.ordermanagement`: Root package
    - `config`: Configuration classes
    - `controller`: API controller classes
    - `dto`: Data Transfer Object classes
    - `exception`: Custom exception classes
    - `model`: Domain model classes
    - `repository`: Data access layer interfaces
    - `security`: Security-related classes
    - `service`: Business logic classes
- `src/main/resources`: Contains application resources
  - `application.properties`: Application configuration properties
- `src/test/java`: Contains test classes
  - `com.example.ordermanagement`: Test classes for each package

## Key Components

- `OrderController`: Handles HTTP requests for order-related operations
- `OrderService`: Implements the business logic for managing orders
- `OrderRepository`: Defines the data access methods for orders
- `SecurityConfig`: Configures security settings and authentication
- `JwtTokenProvider`: Generates and validates JWT tokens
- `GlobalExceptionHandler`: Handles exceptions and returns appropriate error responses

## Setup Instructions

1. Clone the repository: `git clone https://github.com/example/order-management-api.git`
2. Navigate to the project directory: `cd order-management-api`
3. Build the project: `./mvnw clean install`
4. Run the application: `./mvnw spring-boot:run`
5. Access the API endpoints at `http://localhost:8080/api/orders`

## Security Considerations

- The API uses JWT authentication to secure the endpoints. Only authenticated users with valid tokens can access protected resources.
- User inputs are validated using validation annotations to prevent invalid or malicious data.
- Passwords are hashed using BCrypt before storing them in the database.
- The application follows SOLID principles and separates concerns into distinct layers.

