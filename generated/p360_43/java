/*
 * Application Type: Web Application
 * Security Level: High
 * Authentication Method: Multi-factor authentication 
 * Data Sensitivity: Sensitive PII and financial data
 */

// Use secure framework like Spring Security
import org.springframework.security.core.*;
import org.springframework.security.config.*;
import org.springframework.security.web.*;
import org.owasp.esapi.*;

// Input validation using OWASP ESAPI
String safeParam = ESAPI.validator().getValidInput("UserController", userInput, "SafeString", 200, false);

// Secure authentication 
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
      http
        .csrf().disable()
        .authorizeRequests()
        .antMatchers("/admin/**").hasRole("ADMIN")
        .anyRequest().authenticated()
        .and()
        .formLogin()
        .loginPage("/login") 
        .permitAll()
        .and()
        .logout()
        .logoutSuccessUrl("/login?logout")
        .permitAll(); 
    }
}

// Authorization using roles
@PreAuthorize("hasRole('ADMIN')")
public void updateUserProfile(...) { ... }

// Encrypt sensitive data 
Cipher aes = Cipher.getInstance("AES/GCM/NoPadding");
aes.init(Cipher.ENCRYPT_MODE, secretKey);
byte[] encryptedData = aes.doFinal(sensitiveData);

// Exception handling
try {
   // code that may throw exception
} catch (SomeSecurityException ex) {
   // log exception
   // display generic error message
} 

// Security logging
Logger logger = LoggerFactory.getLogger(UserController.class);
logger.info("User {} updated profile", user.getId());
