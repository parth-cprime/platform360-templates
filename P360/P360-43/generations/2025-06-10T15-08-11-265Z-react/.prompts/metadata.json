{
  "taskId": "P360-43",
  "projectKey": "P360",
  "language": "react",
  "securityLevel": "medium",
  "dataSensitivity": "internal",
  "timestamp": "2025-06-10T15:08:11.265Z",
  "files": [
    "src/context/AuthContext.js",
    "src/services/authService.js",
    "src/services/api.js",
    "src/utils/security.js",
    "src/pages/Login.js"
  ],
  "prompt": "You are an expert software developer tasked with implementing high-quality code for a Jira task.\n\nTASK DETAILS:\nTask ID: P360-43\nSummary: P360 sample business requirement task\nDescription: Create a order management API where itBackground\n\nThe customer service team currently receives feedback through a web form, but has no automated way to be notified when urgent issues are reported. Team members must regularly check the system, causing delays in addressing time-sensitive customer concerns.\n\nh2. Business Requirement\n\nCreate a notification system that alerts the appropriate customer service team member when customer feedback requiring immediate attention is submitted.\n\nh2. Key Features\n\n# Automatically analyze incoming feedback for urgent keywords or negative sentiment\n# Route notifications to the appropriate team member based on the feedback category\n# Allow team members to acknowledge receipt of notifications\n# Provide a simple dashboard showing pending and acknowledged urgent feedback\n\nh2. Success Criteria\n\n* Urgent feedback notifications are sent within 2 minutes of submission\n* Team members acknowledge receipt of 95% of urgent notifications within 15 minutes during business hours\n* Customer satisfaction for urgent issues improves by 10% within three months is fetching \nStatus: To Do\nPriority: Medium\n\nTECHNICAL REQUIREMENTS:\nLanguage: react\nSecurity Level: medium\nAuthentication Method: jwt\nData Sensitivity: internal\n\nCOMPANY DOMAIN KNOWLEDGE:\n\nDOMAIN EXPERTISE:\n- Domains: retail, e-commerce, outdoor equipment, customer service, inventory management, human resources, employee onboarding, performance management, compensation & benefits, hr compliance, workplace policy, training & development\n- Technologies: react, node.js, mongodb, aws, mobile apps, pos systems, hris systems, applicant tracking systems, learning management systems, performance management software, payroll systems, benefits administration platforms\n- Methodologies: agile, scrum, kanban, lean retail, structured onboarding, competency-based development, objectives and key results (okrs), talent development frameworks, continuous performance management, data-driven hr analytics\n\nCODING STANDARDS:\n- eslint\n- prettier\n- jest testing\n- responsive design\n\nARCHITECTURE STANDARDS:\n- microservices\n- rest apis\n- event-driven\n- cloud-native\n\nTECHNICAL CONSTRAINTS:\n- must support high seasonal traffic\n- must integrate with existing inventory system\n- must work on all mobile devices\n- must handle real-time inventory updates\n\n\nTEAM CAPABILITIES:\n\nTEAM CAPABILITIES:\n- Skills: react, node.js, retail systems, api development, inventory management, hris implementation, employee relations, compensation structures, benefits administration, regulatory compliance, training development, recruitment strategies\n- Experience Level: e-commerce platforms, retail pos integration, payment processing, employee onboarding program design, policy development and implementation, multi-state hr compliance, performance management systems, learning and development programs, compensation benchmarking, hr process optimization\n- Certifications: aws solutions architect, scrum master, pci compliance, shrm-cp/shrm-scp, phr/sphr, certified compensation professional (ccp), certified employee benefits specialist (cebs), osha compliance certification, diversity and inclusion practitioner, talent acquisition specialist\n\nTEAM HISTORY:\n- inventory-management-system: retail using node.js, mongodb, react\n- mobile-shopping-app: e-commerce using react-native, graphql, stripe\n- omnichannel-loyalty-program: customer retention using node.js, aws, salesforce\n\n\nBUSINESS CONTEXT:\n\nBUSINESS RULES:\n- Naming: product codes must follow CATEGORY-SKU format, branch names must follow feature/JIRA-ID format, apis must use kebab-case\n- Documentation: api endpoints must have swagger documentation, components must have storybook examples, business logic must have unit tests\n- Process: code review required with 2 approvers, regression testing required before release, feature flags for all new functionality, a/b testing for significant ui changes, policy changes require executive approval, hr procedures must be documented with flowcharts, all employee communications must be reviewed by hr and legal, process changes require stakeholder sign-off, policies must be accessible to all employees, policy acknowledgement required during onboarding, annual policy review and acknowledgement for all staff, policy exceptions require director level approval, policies must be consistent with company values, all policies must have training material available\n\nBUSINESS CONSTRAINTS:\n- release cycles are two weeks\n- holiday code freeze from november 15 to january 10\n- major platform updates quarterly\n\nBUSINESS PREFERENCES:\n- microservices for new development\n- event-driven for inventory updates\n- serverless for batch processing\n- caching layer for product catalog\n- github for source control\n- jira for project management\n- aws for cloud infrastructure\n- datadog for monitoring\n\n\nPROJECT STRUCTURE TEMPLATE: \nThis template MUST be strictly followed for your implementation. Reference this structure for all file paths and organization:\n# React Project Structure Template\n\n## Project Structure\n```\nproject/\n├── src/\n│   ├── components/        # Reusable components\n│   │   ├── auth/\n│   │   │   ├── Login.js\n│   │   │   └── Register.js\n│   │   ├── layout/\n│   │   │   ├── Header.js\n│   │   │   └── Footer.js\n│   │   └── common/\n│   │       ├── Button.js\n│   │       └── Input.js\n│   ├── pages/            # Page components\n│   │   ├── Home.js\n│   │   ├── Dashboard.js\n│   │   └── Profile.js\n│   ├── services/         # API services\n│   │   ├── authService.js\n│   │   ├── api.js\n│   │   └── dataService.js\n│   ├── hooks/            # Custom hooks\n│   │   ├── useAuth.js\n│   │   └── useApi.js\n│   ├── context/          # Context providers\n│   │   ├── AuthContext.js\n│   │   └── ThemeContext.js\n│   ├── utils/            # Utility functions\n│   │   ├── security.js\n│   │   ├── validation.js\n│   │   └── encryption.js\n│   ├── assets/           # Static assets\n│   │   ├── images/\n│   │   └── styles/\n│   └── App.js            # Main application\n├── public/               # Public files\n│   ├── index.html\n│   └── favicon.ico\n├── package.json          # Project dependencies\n└── README.md            # Project documentation\n```\n\n## Required Files\n\n### 1. src/context/AuthContext.js\n```javascript\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            authService.validateToken(token)\n                .then(userData => setUser(userData))\n                .catch(() => {\n                    localStorage.removeItem('token');\n                    navigate('/login');\n                })\n                .finally(() => setLoading(false));\n        } else {\n            setLoading(false);\n        }\n    }, []);\n\n    const login = async (credentials) => {\n        const { token, user } = await authService.login(credentials);\n        localStorage.setItem('token', token);\n        setUser(user);\n        navigate('/dashboard');\n    };\n\n    const logout = () => {\n        localStorage.removeItem('token');\n        setUser(null);\n        navigate('/login');\n    };\n\n    return (\n        <AuthContext.Provider value={{ user, login, logout, loading }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n```\n\n### 2. src/services/api.js\n```javascript\nimport axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\n\nconst api = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\napi.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => Promise.reject(error)\n);\n\napi.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (error.response?.status === 401) {\n            localStorage.removeItem('token');\n            window.location.href = '/login';\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport default api;\n```\n\n### 3. src/components/ProtectedRoute.js\n```javascript\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\n\nconst ProtectedRoute = ({ children }) => {\n    const { user, loading } = useAuth();\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (!user) {\n        return <Navigate to=\"/login\" />;\n    }\n\n    return children;\n};\n\nexport default ProtectedRoute;\n```\n\n### 4. src/utils/security.js\n```javascript\nimport CryptoJS from 'crypto-js';\n\nconst SECRET_KEY = process.env.REACT_APP_ENCRYPTION_KEY;\n\nexport const encryptData = (data) => {\n    return CryptoJS.AES.encrypt(JSON.stringify(data), SECRET_KEY).toString();\n};\n\nexport const decryptData = (encryptedData) => {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, SECRET_KEY);\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n};\n\nexport const validateToken = (token) => {\n    try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n        return JSON.parse(jsonPayload);\n    } catch (error) {\n        return null;\n    }\n};\n```\n\n### 5. src/hooks/useAuth.js\n```javascript\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n```\n\n### 6. src/pages/Login.js\n```javascript\nimport React, { useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { encryptData } from '../utils/security';\n\nconst Login = () => {\n    const [credentials, setCredentials] = useState({\n        email: '',\n        password: ''\n    });\n    const { login } = useAuth();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const encryptedCredentials = encryptData(credentials);\n        await login(encryptedCredentials);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"email\"\n                value={credentials.email}\n                onChange={(e) => setCredentials({ ...credentials, email: e.target.value })}\n                required\n            />\n            <input\n                type=\"password\"\n                value={credentials.password}\n                onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n                required\n            />\n            <button type=\"submit\">Login</button>\n        </form>\n    );\n};\n\nexport default Login;\n```\n\n## Dependencies\n```json\n{\n    \"dependencies\": {\n        \"react\": \"^17.0.2\",\n        \"react-dom\": \"^17.0.2\",\n        \"react-router-dom\": \"^5.3.0\",\n        \"axios\": \"^0.21.1\",\n        \"jsonwebtoken\": \"^8.5.1\",\n        \"crypto-js\": \"^4.1.1\"\n    },\n    \"devDependencies\": {\n        \"@testing-library/react\": \"^12.0.0\",\n        \"@testing-library/jest-dom\": \"^5.14.1\"\n    }\n}\n```\n\n## Security Considerations\n1. Implement proper JWT token validation\n2. Use secure password hashing\n3. Enable CORS with proper configuration\n4. Implement rate limiting\n5. Use security headers\n6. Encrypt sensitive data\n7. Implement proper error handling\n8. Use secure session management\n9. Validate all input data\n10. Implement proper logging\n\n## Best Practices\n1. Follow React security best practices\n2. Use environment variables for sensitive data\n3. Implement proper error handling\n4. Use TypeScript for type safety\n5. Implement comprehensive testing\n6. Use proper logging\n7. Follow the principle of least privilege\n8. Implement proper session management\n9. Use secure communication protocols\n10. Regular security updates \n\n\nSECURITY REQUIREMENTS TEMPLATE:\nThe following security requirements MUST be implemented based on the specified security level (medium):\n# React Security Implementation Template\n\n## Security Configuration\n```javascript\n// Security middleware configuration\nconst securityConfig = {\n    helmet: {\n        contentSecurityPolicy: {\n            directives: {\n                defaultSrc: [\"'self'\"],\n                scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n                styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n                imgSrc: [\"'self'\", \"data:\", \"https:\"],\n                connectSrc: [\"'self'\"]\n            }\n        }\n    },\n    rateLimit: {\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 100 // limit each IP to 100 requests per windowMs\n    },\n    cors: {\n        origin: process.env.ALLOWED_ORIGINS?.split(',') || [],\n        methods: ['GET', 'POST', 'PUT', 'DELETE'],\n        credentials: true\n    }\n};\n```\n\n## Authentication Implementation\n```javascript\n// JWT Authentication\nconst jwtConfig = {\n    secret: process.env.JWT_SECRET,\n    expiresIn: '1h',\n    algorithm: 'HS256'\n};\n\n// Password hashing\nconst hashPassword = async (password) => {\n    const salt = await bcrypt.genSalt(10);\n    return bcrypt.hash(password, salt);\n};\n```\n\n## Input Validation\n```javascript\n// Input validation schema\nconst userSchema = Joi.object({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),\n    email: Joi.string().email().required()\n});\n```\n\n## Error Handling\n```javascript\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n    logger.error(err.stack);\n    \n    if (err instanceof ValidationError) {\n        return res.status(400).json({\n            error: 'Validation Error',\n            details: err.details\n        });\n    }\n    \n    if (err instanceof AuthenticationError) {\n        return res.status(401).json({\n            error: 'Authentication Error',\n            message: err.message\n        });\n    }\n    \n    res.status(500).json({\n        error: 'Internal Server Error',\n        message: 'An unexpected error occurred'\n    });\n};\n```\n\n\n\n\nIMPLEMENTATION GUIDELINES:\n1. Use the PROJECT STRUCTURE TEMPLATE as your guide for organizing all code files\n2. Implement ALL the SECURITY REQUIREMENTS appropriate for the specified security level\n3. Include comprehensive error handling, logging, and exception management\n4. Add detailed comments explaining complex logic and important decisions\n5. Implement unit tests for critical functionality\n6. Follow best practices for the specified language and framework\n7. Use modern, clean coding patterns with proper separation of concerns\n\nIMPORTANT: Do NOT just provide implementation instructions or placeholder comments. \nI need COMPLETE, WORKING code with full implementations that can be saved and run.\n\nFILE FORMAT REQUIREMENTS:\nFor each file, provide a clear file path followed by the code content in this format:\n\n```\nFile: src/path/to/filename.extension\n```\n\n```react\n// Full file content here\n```\n\nEnsure each filename is a valid path (e.g., src/components/Auth.tsx) and includes the appropriate extension. \nDo not use descriptions as filenames. Each filename should be a specific path that can be used directly in a filesystem.\n\nIMPORTANT: Provide actual, complete, functional code in all files. Do not include placeholder comments or TODO statements.\n\nIMPLEMENTATION CONSTRAINTS:\n1. Follow the highest security standards based on security level (medium)\n2. Implement appropriate data protection based on sensitivity (internal)\n3. Use proper authentication method (jwt)",
  "parameters": {
    "securityLevel": "medium",
    "authMethod": "jwt",
    "dataSensitivity": "internal"
  },
  "taskDetails": {
    "summary": "P360 sample business requirement task",
    "description": "Create a order management API where itBackground\n\nThe customer service team currently receives feedback through a web form, but has no automated way to be notified when urgent issues are reported. Team members must regularly check the system, causing delays in addressing time-sensitive customer concerns.\n\nh2. Business Requirement\n\nCreate a notification system that alerts the appropriate customer service team member when customer feedback requiring immediate attention is submitted.\n\nh2. Key Features\n\n# Automatically analyze incoming feedback for urgent keywords or negative sentiment\n# Route notifications to the appropriate team member based on the feedback category\n# Allow team members to acknowledge receipt of notifications\n# Provide a simple dashboard showing pending and acknowledged urgent feedback\n\nh2. Success Criteria\n\n* Urgent feedback notifications are sent within 2 minutes of submission\n* Team members acknowledge receipt of 95% of urgent notifications within 15 minutes during business hours\n* Customer satisfaction for urgent issues improves by 10% within three months is fetching ",
    "status": "To Do",
    "priority": "Medium"
  }
}