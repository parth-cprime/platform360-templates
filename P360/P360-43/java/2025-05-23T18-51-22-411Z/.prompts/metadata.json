{
  "taskId": "P360-43",
  "projectKey": "P360",
  "language": "java",
  "securityLevel": "medium",
  "dataSensitivity": "internal",
  "timestamp": "2025-05-23T18:51:22.411Z",
  "files": [
    "src/config/SecurityConfig.java",
    "src/utils/JwtTokenProvider.java",
    "src/services/CustomUserDetailsService.java",
    "src/services/FeedbackService.java",
    "src/controllers/FeedbackController.java",
    "src/models/Feedback.java"
  ],
  "prompt": "You are an expert software developer tasked with implementing high-quality code for a Jira task.\n\nTASK DETAILS:\nTask ID: P360-43\nSummary: P360 sample business requirement task\nDescription: Create a order management API where itBackground\n\nThe customer service team currently receives feedback through a web form, but has no automated way to be notified when urgent issues are reported. Team members must regularly check the system, causing delays in addressing time-sensitive customer concerns.\n\nh2. Business Requirement\n\nCreate a notification system that alerts the appropriate customer service team member when customer feedback requiring immediate attention is submitted.\n\nh2. Key Features\n\n# Automatically analyze incoming feedback for urgent keywords or negative sentiment\n# Route notifications to the appropriate team member based on the feedback category\n# Allow team members to acknowledge receipt of notifications\n# Provide a simple dashboard showing pending and acknowledged urgent feedback\n\nh2. Success Criteria\n\n* Urgent feedback notifications are sent within 2 minutes of submission\n* Team members acknowledge receipt of 95% of urgent notifications within 15 minutes during business hours\n* Customer satisfaction for urgent issues improves by 10% within three months is fetching \nStatus: To Do\nPriority: Medium\n\nTECHNICAL REQUIREMENTS:\nLanguage: java\nSecurity Level: medium\nAuthentication Method: jwt\nData Sensitivity: internal\n\nPROJECT STRUCTURE:\n\n# java Project Structure\n\n## Project Structure\n```\nproject/\n├── src/\n│   ├── components/        # Reusable components\n│   ├── pages/            # Page components\n│   ├── services/         # API services\n│   ├── hooks/            # Custom hooks\n│   ├── context/          # Context providers\n│   ├── utils/            # Utility functions\n│   ├── assets/           # Static assets\n│   └── App.js            # Main application\n├── public/               # Public files\n├── package.json          # Project dependencies\n└── README.md            # Project documentation\n```\n\n\nSECURITY REQUIREMENTS:\n# Java Security Implementation Template\n\n## Security Configuration\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .csrf().disable()\n            .authorizeRequests()\n            .antMatchers(\"/api/public/**\").permitAll()\n            .antMatchers(\"/api/private/**\").authenticated()\n            .and()\n            .sessionManagement()\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            .and()\n            .addFilter(new JwtAuthenticationFilter(authenticationManager()));\n    }\n    \n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n```\n\n## Authentication Implementation\n```java\n@Component\npublic class JwtTokenProvider {\n    \n    private final String jwtSecret;\n    private final long jwtExpirationInMs;\n    \n    public String generateToken(UserDetails userDetails) {\n        Map<String, Object> claims = new HashMap<>();\n        claims.put(\"roles\", userDetails.getAuthorities());\n        \n        return Jwts.builder()\n            .setClaims(claims)\n            .setSubject(userDetails.getUsername())\n            .setIssuedAt(new Date())\n            .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationInMs))\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\n            .compact();\n    }\n}\n```\n\n## Input Validation\n```java\n@RestController\npublic class UserController {\n    \n    @PostMapping(\"/users\")\n    public ResponseEntity<?> createUser(@Valid @RequestBody UserDTO userDTO) {\n        // Implementation\n    }\n}\n\npublic class UserDTO {\n    @NotBlank(message = \"Username is required\")\n    @Size(min = 3, max = 30, message = \"Username must be between 3 and 30 characters\")\n    private String username;\n    \n    @NotBlank(message = \"Password is required\")\n    @Pattern(regexp = \"^[a-zA-Z0-9]{3,30}$\", message = \"Password must be alphanumeric\")\n    private String password;\n    \n    @NotBlank(message = \"Email is required\")\n    @Email(message = \"Email must be valid\")\n    private String email;\n}\n```\n\n## Error Handling\n```java\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n    \n    @ExceptionHandler(ValidationException.class)\n    public ResponseEntity<ErrorResponse> handleValidationException(ValidationException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"Validation Error\",\n            ex.getMessage(),\n            HttpStatus.BAD_REQUEST\n        );\n        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);\n    }\n    \n    @ExceptionHandler(AuthenticationException.class)\n    public ResponseEntity<ErrorResponse> handleAuthenticationException(AuthenticationException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"Authentication Error\",\n            ex.getMessage(),\n            HttpStatus.UNAUTHORIZED\n        );\n        return new ResponseEntity<>(error, HttpStatus.UNAUTHORIZED);\n    }\n}\n```\n\n\nIMPLEMENTATION INSTRUCTIONS:\n1. Generate complete, production-ready code implementing the functionality described in the task.\n2. Include proper error handling, logging, and comments.\n3. Follow best practices for the specified language and frameworks.\n4. Apply appropriate design patterns based on the requirements.\n5. Implement robust security measures aligned with the specified security level.\n\nIMPORTANT: Do NOT just provide implementation instructions or placeholder comments. \nI need COMPLETE, WORKING code with full implementations that can be saved and run.\n\nFILE FORMAT REQUIREMENTS:\nFor each file, provide a clear file path followed by the code content in this format:\n\n```\nFile: src/path/to/filename.extension\n```\n\n```java\n// Full file content here\n```\n\nEnsure each filename is a valid path (e.g., src/components/Auth.tsx) and includes the appropriate extension. \nDo not use descriptions as filenames. Each filename should be a specific path that can be used directly in a filesystem.\n\nIMPORTANT: Provide actual, complete, functional code in all files. Do not include placeholder comments or TODO statements.\n\nIMPLEMENTATION CONSTRAINTS:\n1. Follow the highest security standards based on security level (medium)\n2. Implement appropriate data protection based on sensitivity (internal)\n3. Use proper authentication method (jwt)",
  "parameters": {
    "securityLevel": "medium",
    "authMethod": "jwt",
    "dataSensitivity": "internal"
  },
  "taskDetails": {
    "summary": "P360 sample business requirement task",
    "description": "Create a order management API where itBackground\n\nThe customer service team currently receives feedback through a web form, but has no automated way to be notified when urgent issues are reported. Team members must regularly check the system, causing delays in addressing time-sensitive customer concerns.\n\nh2. Business Requirement\n\nCreate a notification system that alerts the appropriate customer service team member when customer feedback requiring immediate attention is submitted.\n\nh2. Key Features\n\n# Automatically analyze incoming feedback for urgent keywords or negative sentiment\n# Route notifications to the appropriate team member based on the feedback category\n# Allow team members to acknowledge receipt of notifications\n# Provide a simple dashboard showing pending and acknowledged urgent feedback\n\nh2. Success Criteria\n\n* Urgent feedback notifications are sent within 2 minutes of submission\n* Team members acknowledge receipt of 95% of urgent notifications within 15 minutes during business hours\n* Customer satisfaction for urgent issues improves by 10% within three months is fetching ",
    "status": "To Do",
    "priority": "Medium"
  }
}