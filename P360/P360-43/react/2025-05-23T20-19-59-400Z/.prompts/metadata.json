{
  "taskId": "P360-43",
  "projectKey": "P360",
  "language": "react",
  "securityLevel": "medium",
  "dataSensitivity": "internal",
  "timestamp": "2025-05-23T20:19:59.400Z",
  "files": [
    "src/services/SecurityService.js",
    "src/services/AuthService.js",
    "src/services/FeedbackService.js",
    "src/components/Notification.js"
  ],
  "prompt": "You are an expert software developer tasked with implementing high-quality code for a Jira task.\n\nTASK DETAILS:\nTask ID: P360-43\nSummary: P360 sample business requirement task\nDescription: Create a order management API where itBackground\n\nThe customer service team currently receives feedback through a web form, but has no automated way to be notified when urgent issues are reported. Team members must regularly check the system, causing delays in addressing time-sensitive customer concerns.\n\nh2. Business Requirement\n\nCreate a notification system that alerts the appropriate customer service team member when customer feedback requiring immediate attention is submitted.\n\nh2. Key Features\n\n# Automatically analyze incoming feedback for urgent keywords or negative sentiment\n# Route notifications to the appropriate team member based on the feedback category\n# Allow team members to acknowledge receipt of notifications\n# Provide a simple dashboard showing pending and acknowledged urgent feedback\n\nh2. Success Criteria\n\n* Urgent feedback notifications are sent within 2 minutes of submission\n* Team members acknowledge receipt of 95% of urgent notifications within 15 minutes during business hours\n* Customer satisfaction for urgent issues improves by 10% within three months is fetching \nStatus: To Do\nPriority: Medium\n\nTECHNICAL REQUIREMENTS:\nLanguage: react\nSecurity Level: medium\nAuthentication Method: jwt\nData Sensitivity: internal\n\nPROJECT STRUCTURE TEMPLATE: \nThis template MUST be strictly followed for your implementation. Reference this structure for all file paths and organization:\n\n# react Project Structure\n\n## Project Structure\n```\nproject/\n├── src/\n│   ├── components/        # Reusable components\n│   ├── pages/            # Page components\n│   ├── services/         # API services\n│   ├── hooks/            # Custom hooks\n│   ├── context/          # Context providers\n│   ├── utils/            # Utility functions\n│   ├── assets/           # Static assets\n│   └── App.js            # Main application\n├── public/               # Public files\n├── package.json          # Project dependencies\n└── README.md            # Project documentation\n```\n\n\nSECURITY REQUIREMENTS TEMPLATE:\nThe following security requirements MUST be implemented based on the specified security level (medium):\n# React Security Implementation Template\n\n## Security Configuration\n```javascript\n// Security middleware configuration\nconst securityConfig = {\n    helmet: {\n        contentSecurityPolicy: {\n            directives: {\n                defaultSrc: [\"'self'\"],\n                scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n                styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n                imgSrc: [\"'self'\", \"data:\", \"https:\"],\n                connectSrc: [\"'self'\"]\n            }\n        }\n    },\n    rateLimit: {\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 100 // limit each IP to 100 requests per windowMs\n    },\n    cors: {\n        origin: process.env.ALLOWED_ORIGINS?.split(',') || [],\n        methods: ['GET', 'POST', 'PUT', 'DELETE'],\n        credentials: true\n    }\n};\n```\n\n## Authentication Implementation\n```javascript\n// JWT Authentication\nconst jwtConfig = {\n    secret: process.env.JWT_SECRET,\n    expiresIn: '1h',\n    algorithm: 'HS256'\n};\n\n// Password hashing\nconst hashPassword = async (password) => {\n    const salt = await bcrypt.genSalt(10);\n    return bcrypt.hash(password, salt);\n};\n```\n\n## Input Validation\n```javascript\n// Input validation schema\nconst userSchema = Joi.object({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),\n    email: Joi.string().email().required()\n});\n```\n\n## Error Handling\n```javascript\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n    logger.error(err.stack);\n    \n    if (err instanceof ValidationError) {\n        return res.status(400).json({\n            error: 'Validation Error',\n            details: err.details\n        });\n    }\n    \n    if (err instanceof AuthenticationError) {\n        return res.status(401).json({\n            error: 'Authentication Error',\n            message: err.message\n        });\n    }\n    \n    res.status(500).json({\n        error: 'Internal Server Error',\n        message: 'An unexpected error occurred'\n    });\n};\n```\n\n\n\n\nIMPLEMENTATION GUIDELINES:\n1. Use the PROJECT STRUCTURE TEMPLATE as your guide for organizing all code files\n2. Implement ALL the SECURITY REQUIREMENTS appropriate for the specified security level\n3. Include comprehensive error handling, logging, and exception management\n4. Add detailed comments explaining complex logic and important decisions\n5. Implement unit tests for critical functionality\n6. Follow best practices for the specified language and framework\n7. Use modern, clean coding patterns with proper separation of concerns\n\nIMPORTANT: Do NOT just provide implementation instructions or placeholder comments. \nI need COMPLETE, WORKING code with full implementations that can be saved and run.\n\nFILE FORMAT REQUIREMENTS:\nFor each file, provide a clear file path followed by the code content in this format:\n\n```\nFile: src/path/to/filename.extension\n```\n\n```react\n// Full file content here\n```\n\nEnsure each filename is a valid path (e.g., src/components/Auth.tsx) and includes the appropriate extension. \nDo not use descriptions as filenames. Each filename should be a specific path that can be used directly in a filesystem.\n\nIMPORTANT: Provide actual, complete, functional code in all files. Do not include placeholder comments or TODO statements.\n\nIMPLEMENTATION CONSTRAINTS:\n1. Follow the highest security standards based on security level (medium)\n2. Implement appropriate data protection based on sensitivity (internal)\n3. Use proper authentication method (jwt)",
  "parameters": {
    "securityLevel": "medium",
    "authMethod": "jwt",
    "dataSensitivity": "internal"
  },
  "taskDetails": {
    "summary": "P360 sample business requirement task",
    "description": "Create a order management API where itBackground\n\nThe customer service team currently receives feedback through a web form, but has no automated way to be notified when urgent issues are reported. Team members must regularly check the system, causing delays in addressing time-sensitive customer concerns.\n\nh2. Business Requirement\n\nCreate a notification system that alerts the appropriate customer service team member when customer feedback requiring immediate attention is submitted.\n\nh2. Key Features\n\n# Automatically analyze incoming feedback for urgent keywords or negative sentiment\n# Route notifications to the appropriate team member based on the feedback category\n# Allow team members to acknowledge receipt of notifications\n# Provide a simple dashboard showing pending and acknowledged urgent feedback\n\nh2. Success Criteria\n\n* Urgent feedback notifications are sent within 2 minutes of submission\n* Team members acknowledge receipt of 95% of urgent notifications within 15 minutes during business hours\n* Customer satisfaction for urgent issues improves by 10% within three months is fetching ",
    "status": "To Do",
    "priority": "Medium"
  }
}