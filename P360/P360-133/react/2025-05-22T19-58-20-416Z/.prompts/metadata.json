{
  "taskId": "P360-133",
  "projectKey": "P360",
  "language": "react",
  "securityLevel": "medium",
  "dataSensitivity": "internal",
  "timestamp": "2025-05-22T19:58:20.416Z",
  "files": [
    "src/context/AuthContext.js",
    "src/hooks/useOrderFalloutData.js",
    "src/pages/OrderFalloutPage.js",
    "src/services/mockOrderFalloutService.js"
  ],
  "prompt": "You are an expert software developer tasked with implementing high-quality code for a Jira task.\n\nTASK DETAILS:\nTask ID: P360-133\nSummary: Design API endpoints for order fallout data retrieval\nDescription: No description provided\nStatus: To Do\nPriority: Medium\n\nTECHNICAL REQUIREMENTS:\nLanguage: react\nSecurity Level: medium\nAuthentication Method: jwt\nData Sensitivity: internal\n\nPROJECT STRUCTURE:\n\n# react Project Structure\n\n## Project Structure\n```\nproject/\n├── src/\n│   ├── components/        # Reusable components\n│   ├── pages/            # Page components\n│   ├── services/         # API services\n│   ├── hooks/            # Custom hooks\n│   ├── context/          # Context providers\n│   ├── utils/            # Utility functions\n│   ├── assets/           # Static assets\n│   └── App.js            # Main application\n├── public/               # Public files\n├── package.json          # Project dependencies\n└── README.md            # Project documentation\n```\n\n\nSECURITY REQUIREMENTS:\n# React Security Implementation Template\n\n## Security Configuration\n```javascript\n// Security middleware configuration\nconst securityConfig = {\n    helmet: {\n        contentSecurityPolicy: {\n            directives: {\n                defaultSrc: [\"'self'\"],\n                scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n                styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n                imgSrc: [\"'self'\", \"data:\", \"https:\"],\n                connectSrc: [\"'self'\"]\n            }\n        }\n    },\n    rateLimit: {\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 100 // limit each IP to 100 requests per windowMs\n    },\n    cors: {\n        origin: process.env.ALLOWED_ORIGINS?.split(',') || [],\n        methods: ['GET', 'POST', 'PUT', 'DELETE'],\n        credentials: true\n    }\n};\n```\n\n## Authentication Implementation\n```javascript\n// JWT Authentication\nconst jwtConfig = {\n    secret: process.env.JWT_SECRET,\n    expiresIn: '1h',\n    algorithm: 'HS256'\n};\n\n// Password hashing\nconst hashPassword = async (password) => {\n    const salt = await bcrypt.genSalt(10);\n    return bcrypt.hash(password, salt);\n};\n```\n\n## Input Validation\n```javascript\n// Input validation schema\nconst userSchema = Joi.object({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),\n    email: Joi.string().email().required()\n});\n```\n\n## Error Handling\n```javascript\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n    logger.error(err.stack);\n    \n    if (err instanceof ValidationError) {\n        return res.status(400).json({\n            error: 'Validation Error',\n            details: err.details\n        });\n    }\n    \n    if (err instanceof AuthenticationError) {\n        return res.status(401).json({\n            error: 'Authentication Error',\n            message: err.message\n        });\n    }\n    \n    res.status(500).json({\n        error: 'Internal Server Error',\n        message: 'An unexpected error occurred'\n    });\n};\n```\n\n\nIMPLEMENTATION INSTRUCTIONS:\n1. Generate complete, production-ready code implementing the functionality described in the task.\n2. Include proper error handling, logging, and comments.\n3. Follow best practices for the specified language and frameworks.\n4. Apply appropriate design patterns based on the requirements.\n5. Implement robust security measures aligned with the specified security level.\n\nIMPORTANT: Do NOT just provide implementation instructions or placeholder comments. \nI need COMPLETE, WORKING code with full implementations that can be saved and run.\n\nFILE FORMAT REQUIREMENTS:\nFor each file, provide a clear file path followed by the code content in this format:\n\n```\nFile: src/path/to/filename.extension\n```\n\n```react\n// Full file content here\n```\n\nEnsure each filename is a valid path (e.g., src/components/Auth.tsx) and includes the appropriate extension. \nDo not use descriptions as filenames. Each filename should be a specific path that can be used directly in a filesystem.\n\nIMPORTANT: Provide actual, complete, functional code in all files. Do not include placeholder comments or TODO statements.\n\nIMPLEMENTATION CONSTRAINTS:\n1. Follow the highest security standards based on security level (medium)\n2. Implement appropriate data protection based on sensitivity (internal)\n3. Use proper authentication method (jwt)",
  "parameters": {
    "securityLevel": "medium",
    "authMethod": "jwt",
    "dataSensitivity": "internal"
  },
  "taskDetails": {
    "summary": "Design API endpoints for order fallout data retrieval",
    "description": null,
    "status": "To Do",
    "priority": "Medium"
  }
}