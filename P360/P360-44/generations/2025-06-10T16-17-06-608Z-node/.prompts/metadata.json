{
  "taskId": "P360-44",
  "projectKey": "P360",
  "language": "node",
  "securityLevel": "medium",
  "dataSensitivity": "internal",
  "timestamp": "2025-06-10T16:17:06.609Z",
  "files": [
    "src/config/security.js",
    "src/middleware/auth.js",
    "src/controllers/apiController.js",
    "src/routes/api.js",
    "src/services/dataService.js",
    "src/utils/logger.js",
    "src/utils/errorHandlers.js"
  ],
  "prompt": "You are an expert software developer tasked with implementing high-quality code for a Jira task.\n\nTASK DETAILS:\nTask ID: P360-44\nSummary: Sample business requirement for VWO integration \nDescription: h2. Overview\n\nDevelop a responsive, high-conversion marketing page for [Product/Service Name] that effectively communicates our value proposition, drives user engagement, and converts visitors into qualified leads or customers.\n\nh2. Key Requirements\n\n# *Brand Presentation*\n#* Prominently display company logo, brand colors, and visual identity throughout the page\n#* Communicate brand voice and messaging consistently in all copy elements\n#* Include a compelling hero section with clear value proposition statement\n# *Content Components*\n#* Feature overview section highlighting 3-5 key product/service benefits with supporting visuals\n#* Customer testimonials or case studies showcasing real results\n#* Pricing options with clear feature comparisons (if applicable)\n#* FAQ section addressing common customer questions\n#* Trust indicators (client logos, certifications, security badges)\n# *Lead Capture*\n#* Primary CTA (Call-to-Action) button above the fold directing to sign-up/purchase\n#* Secondary lead capture form offering valuable content download (whitepaper, guide, etc.)\n#* Email newsletter subscription option\n#* Contact information or chatbot integration for immediate assistance\n# *Technical Requirements*\n#* Mobile-responsive design optimized for all device sizes\n#* Page load time under 3 seconds\n#* SEO-optimized structure and content\n#* Analytics integration to track user behavior and conversion metrics\n#* A/B testing capability for key page elements\n# *Integration Requirements*\n#* CRM integration for lead data collection\n#* Marketing automation platform connection for email follow-ups\n#* Social media sharing functionality\n#* Third-party review platform integration (if applicable)\n\nh2. Success Metrics\n\n* Increase website conversion rate to 3.5% (industry benchmark)\n* Reduce bounce rate below 40%\n* Achieve average session duration of 2+ minutes\n* Generate 200+ qualified leads per month\nStatus: To Do\nPriority: Medium\n\nTECHNICAL REQUIREMENTS:\nLanguage: node\nSecurity Level: medium\nAuthentication Method: jwt\nData Sensitivity: internal\n\nCOMPANY DOMAIN KNOWLEDGE:\n\nDOMAIN EXPERTISE:\n- Domains: retail, e-commerce, outdoor equipment, customer service, inventory management, human resources, employee onboarding, performance management, compensation & benefits, hr compliance, workplace policy, training & development\n- Technologies: react, node.js, mongodb, aws, mobile apps, pos systems, hris systems, applicant tracking systems, learning management systems, performance management software, payroll systems, benefits administration platforms\n- Methodologies: agile, scrum, kanban, lean retail, structured onboarding, competency-based development, objectives and key results (okrs), talent development frameworks, continuous performance management, data-driven hr analytics\n\nCODING STANDARDS:\n- eslint\n- prettier\n- jest testing\n- responsive design\n\nARCHITECTURE STANDARDS:\n- microservices\n- rest apis\n- event-driven\n- cloud-native\n\nTECHNICAL CONSTRAINTS:\n- must support high seasonal traffic\n- must integrate with existing inventory system\n- must work on all mobile devices\n- must handle real-time inventory updates\n\n\nTEAM CAPABILITIES:\n\nTEAM CAPABILITIES:\n- Skills: react, node.js, retail systems, api development, inventory management, hris implementation, employee relations, compensation structures, benefits administration, regulatory compliance, training development, recruitment strategies\n- Experience Level: e-commerce platforms, retail pos integration, payment processing, employee onboarding program design, policy development and implementation, multi-state hr compliance, performance management systems, learning and development programs, compensation benchmarking, hr process optimization\n- Certifications: aws solutions architect, scrum master, pci compliance, shrm-cp/shrm-scp, phr/sphr, certified compensation professional (ccp), certified employee benefits specialist (cebs), osha compliance certification, diversity and inclusion practitioner, talent acquisition specialist\n\nTEAM HISTORY:\n- inventory-management-system: retail using node.js, mongodb, react\n- mobile-shopping-app: e-commerce using react-native, graphql, stripe\n- omnichannel-loyalty-program: customer retention using node.js, aws, salesforce\n\n\nBUSINESS CONTEXT:\n\nBUSINESS RULES:\n- Naming: product codes must follow CATEGORY-SKU format, branch names must follow feature/JIRA-ID format, apis must use kebab-case\n- Documentation: api endpoints must have swagger documentation, components must have storybook examples, business logic must have unit tests\n- Process: code review required with 2 approvers, regression testing required before release, feature flags for all new functionality, a/b testing for significant ui changes, policy changes require executive approval, hr procedures must be documented with flowcharts, all employee communications must be reviewed by hr and legal, process changes require stakeholder sign-off, policies must be accessible to all employees, policy acknowledgement required during onboarding, annual policy review and acknowledgement for all staff, policy exceptions require director level approval, policies must be consistent with company values, all policies must have training material available\n\nBUSINESS CONSTRAINTS:\n- release cycles are two weeks\n- holiday code freeze from november 15 to january 10\n- major platform updates quarterly\n\nBUSINESS PREFERENCES:\n- microservices for new development\n- event-driven for inventory updates\n- serverless for batch processing\n- caching layer for product catalog\n- github for source control\n- jira for project management\n- aws for cloud infrastructure\n- datadog for monitoring\n\n\nPROJECT STRUCTURE TEMPLATE: \nThis template MUST be strictly followed for your implementation. Reference this structure for all file paths and organization:\n# Node.js Project Structure Template\n\n## Project Structure\n```\nproject/\n├── src/\n│   ├── controllers/         # API controllers\n│   │   ├── authController.js\n│   │   ├── userController.js\n│   │   └── apiController.js\n│   ├── models/             # Data models\n│   │   ├── user.js\n│   │   └── index.js\n│   ├── routes/             # API routes\n│   │   ├── auth.js\n│   │   ├── user.js\n│   │   └── index.js\n│   ├── services/           # Business logic\n│   │   ├── authService.js\n│   │   ├── userService.js\n│   │   └── dataService.js\n│   ├── middleware/         # Custom middleware\n│   │   ├── auth.js\n│   │   ├── error.js\n│   │   └── validation.js\n│   ├── config/             # Configuration files\n│   │   ├── security.js\n│   │   ├── database.js\n│   │   └── index.js\n│   ├── utils/              # Utility functions\n│   │   ├── logger.js\n│   │   ├── validator.js\n│   │   └── encryption.js\n│   └── index.js            # Application entry point\n├── tests/                  # Test files\n│   ├── controllers/\n│   ├── services/\n│   └── utils/\n├── package.json            # Project dependencies\n└── README.md              # Project documentation\n```\n\n## Required Files\n\n### 1. src/config/security.js\n```javascript\n// Security configuration\nmodule.exports = {\n    jwtSecret: process.env.JWT_SECRET,\n    jwtExpiration: '1h',\n    bcryptSaltRounds: 10,\n    corsOptions: {\n        origin: process.env.ALLOWED_ORIGINS,\n        methods: ['GET', 'POST', 'PUT', 'DELETE'],\n        allowedHeaders: ['Content-Type', 'Authorization']\n    }\n};\n```\n\n### 2. src/middleware/auth.js\n```javascript\n// JWT authentication middleware\nconst jwt = require('jsonwebtoken');\nconst config = require('../config/security');\n\nmodule.exports = (req, res, next) => {\n    const token = req.headers.authorization?.split(' ')[1];\n    if (!token) return res.status(401).json({ error: 'No token provided' });\n\n    try {\n        const decoded = jwt.verify(token, config.jwtSecret);\n        req.user = decoded;\n        next();\n    } catch (error) {\n        res.status(401).json({ error: 'Invalid token' });\n    }\n};\n```\n\n### 3. src/controllers/apiController.js\n```javascript\n// Main API controller\nconst express = require('express');\nconst router = express.Router();\nconst auth = require('../middleware/auth');\n\nrouter.get('/protected', auth, (req, res) => {\n    res.json({ message: 'Protected route accessed' });\n});\n\nmodule.exports = router;\n```\n\n### 4. src/routes/api.js\n```javascript\n// API routes with security middleware\nconst express = require('express');\nconst router = express.Router();\nconst auth = require('../middleware/auth');\n\nconst apiController = require('../controllers/apiController');\n\nrouter.use('/api', auth, apiController);\n\nmodule.exports = router;\n```\n\n### 5. src/services/dataService.js\n```javascript\n// Service layer with data encryption\nconst crypto = require('crypto');\nconst config = require('../config/security');\n\nclass DataService {\n    encryptData(data) {\n        const cipher = crypto.createCipher('aes-256-cbc', config.encryptionKey);\n        let encrypted = cipher.update(JSON.stringify(data), 'utf8', 'hex');\n        encrypted += cipher.final('hex');\n        return encrypted;\n    }\n\n    decryptData(encryptedData) {\n        const decipher = crypto.createDecipher('aes-256-cbc', config.encryptionKey);\n        let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n        decrypted += decipher.final('utf8');\n        return JSON.parse(decrypted);\n    }\n}\n\nmodule.exports = new DataService();\n```\n\n### 6. src/utils/logger.js\n```javascript\n// Security logging utility\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.json()\n    ),\n    transports: [\n        new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n        new winston.transports.File({ filename: 'logs/combined.log' })\n    ]\n});\n\nif (process.env.NODE_ENV !== 'production') {\n    logger.add(new winston.transports.Console({\n        format: winston.format.simple()\n    }));\n}\n\nmodule.exports = logger;\n```\n\n## Dependencies\n```json\n{\n    \"dependencies\": {\n        \"express\": \"^4.17.1\",\n        \"jsonwebtoken\": \"^8.5.1\",\n        \"bcryptjs\": \"^2.4.3\",\n        \"helmet\": \"^4.6.0\",\n        \"cors\": \"^2.8.5\",\n        \"winston\": \"^3.3.3\",\n        \"crypto\": \"^1.0.1\"\n    },\n    \"devDependencies\": {\n        \"jest\": \"^27.0.6\",\n        \"supertest\": \"^6.1.3\"\n    }\n}\n```\n\n## Security Considerations\n1. Implement proper JWT token validation\n2. Use secure password hashing with bcrypt\n3. Enable CORS with proper configuration\n4. Implement rate limiting\n5. Use security headers with helmet\n6. Encrypt sensitive data\n7. Implement proper error handling\n8. Use secure session management\n9. Validate all input data\n10. Implement proper logging\n\n## Best Practices\n1. Follow Node.js security best practices\n2. Use environment variables for sensitive data\n3. Implement proper error handling\n4. Use TypeScript for type safety\n5. Implement comprehensive testing\n6. Use proper logging\n7. Follow the principle of least privilege\n8. Implement proper session management\n9. Use secure communication protocols\n10. Regular security updates \n\n\nSECURITY REQUIREMENTS TEMPLATE:\nThe following security requirements MUST be implemented based on the specified security level (medium):\n# Node.js Security Implementation Template\n\n## Security Configuration\n```javascript\n// Security middleware configuration\nconst securityConfig = {\n    helmet: {\n        contentSecurityPolicy: {\n            directives: {\n                defaultSrc: [\"'self'\"],\n                scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n                styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n                imgSrc: [\"'self'\", \"data:\", \"https:\"],\n                connectSrc: [\"'self'\"]\n            }\n        }\n    },\n    rateLimit: {\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 100 // limit each IP to 100 requests per windowMs\n    },\n    cors: {\n        origin: process.env.ALLOWED_ORIGINS?.split(',') || [],\n        methods: ['GET', 'POST', 'PUT', 'DELETE'],\n        credentials: true\n    }\n};\n```\n\n## Authentication Implementation\n```javascript\n// JWT Authentication\nconst jwtConfig = {\n    secret: process.env.JWT_SECRET,\n    expiresIn: '1h',\n    algorithm: 'HS256'\n};\n\n// Password hashing\nconst hashPassword = async (password) => {\n    const salt = await bcrypt.genSalt(10);\n    return bcrypt.hash(password, salt);\n};\n```\n\n## Input Validation\n```javascript\n// Input validation schema\nconst userSchema = Joi.object({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),\n    email: Joi.string().email().required()\n});\n```\n\n## Error Handling\n```javascript\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n    logger.error(err.stack);\n    \n    if (err instanceof ValidationError) {\n        return res.status(400).json({\n            error: 'Validation Error',\n            details: err.details\n        });\n    }\n    \n    if (err instanceof AuthenticationError) {\n        return res.status(401).json({\n            error: 'Authentication Error',\n            message: err.message\n        });\n    }\n    \n    res.status(500).json({\n        error: 'Internal Server Error',\n        message: 'An unexpected error occurred'\n    });\n};\n```\n\n\n\n\nIMPLEMENTATION GUIDELINES:\n1. Use the PROJECT STRUCTURE TEMPLATE as your guide for organizing all code files\n2. Implement ALL the SECURITY REQUIREMENTS appropriate for the specified security level\n3. Include comprehensive error handling, logging, and exception management\n4. Add detailed comments explaining complex logic and important decisions\n5. Implement unit tests for critical functionality\n6. Follow best practices for the specified language and framework\n7. Use modern, clean coding patterns with proper separation of concerns\n\nIMPORTANT: Do NOT just provide implementation instructions or placeholder comments. \nI need COMPLETE, WORKING code with full implementations that can be saved and run.\n\nFILE FORMAT REQUIREMENTS:\nFor each file, provide a clear file path followed by the code content in this format:\n\n```\nFile: src/path/to/filename.extension\n```\n\n```node\n// Full file content here\n```\n\nEnsure each filename is a valid path (e.g., src/components/Auth.tsx) and includes the appropriate extension. \nDo not use descriptions as filenames. Each filename should be a specific path that can be used directly in a filesystem.\n\nIMPORTANT: Provide actual, complete, functional code in all files. Do not include placeholder comments or TODO statements.\n\nIMPLEMENTATION CONSTRAINTS:\n1. Follow the highest security standards based on security level (medium)\n2. Implement appropriate data protection based on sensitivity (internal)\n3. Use proper authentication method (jwt)",
  "parameters": {
    "securityLevel": "medium",
    "authMethod": "jwt",
    "dataSensitivity": "internal"
  },
  "taskDetails": {
    "summary": "Sample business requirement for VWO integration ",
    "description": "h2. Overview\n\nDevelop a responsive, high-conversion marketing page for [Product/Service Name] that effectively communicates our value proposition, drives user engagement, and converts visitors into qualified leads or customers.\n\nh2. Key Requirements\n\n# *Brand Presentation*\n#* Prominently display company logo, brand colors, and visual identity throughout the page\n#* Communicate brand voice and messaging consistently in all copy elements\n#* Include a compelling hero section with clear value proposition statement\n# *Content Components*\n#* Feature overview section highlighting 3-5 key product/service benefits with supporting visuals\n#* Customer testimonials or case studies showcasing real results\n#* Pricing options with clear feature comparisons (if applicable)\n#* FAQ section addressing common customer questions\n#* Trust indicators (client logos, certifications, security badges)\n# *Lead Capture*\n#* Primary CTA (Call-to-Action) button above the fold directing to sign-up/purchase\n#* Secondary lead capture form offering valuable content download (whitepaper, guide, etc.)\n#* Email newsletter subscription option\n#* Contact information or chatbot integration for immediate assistance\n# *Technical Requirements*\n#* Mobile-responsive design optimized for all device sizes\n#* Page load time under 3 seconds\n#* SEO-optimized structure and content\n#* Analytics integration to track user behavior and conversion metrics\n#* A/B testing capability for key page elements\n# *Integration Requirements*\n#* CRM integration for lead data collection\n#* Marketing automation platform connection for email follow-ups\n#* Social media sharing functionality\n#* Third-party review platform integration (if applicable)\n\nh2. Success Metrics\n\n* Increase website conversion rate to 3.5% (industry benchmark)\n* Reduce bounce rate below 40%\n* Achieve average session duration of 2+ minutes\n* Generate 200+ qualified leads per month",
    "status": "To Do",
    "priority": "Medium"
  }
}