{
  "type": "code",
  "timestamp": "2025-04-15T22:20:18.938Z",
  "taskId": "P360-43",
  "language": "java",
  "prompt": {
    "system": "You are a code generation assistant. Generate code for a java project following this structure:\n\n# Java Project Structure Template\n\n## Project Structure\n```\nproject/\n├── src/main/java/\n│   └── com/company/\n│       ├── controller/     # REST controllers\n│       │   ├── AuthController.java\n│       │   ├── UserController.java\n│       │   └── ApiController.java\n│       ├── model/         # Data models\n│       │   ├── User.java\n│       │   ├── Role.java\n│       │   └── dto/\n│       ├── service/       # Business logic\n│       │   ├── AuthService.java\n│       │   ├── UserService.java\n│       │   └── DataService.java\n│       ├── repository/    # Data access\n│       │   ├── UserRepository.java\n│       │   └── RoleRepository.java\n│       ├── config/        # Configuration\n│       │   ├── SecurityConfig.java\n│       │   └── WebConfig.java\n│       ├── security/      # Security components\n│       │   ├── JwtTokenProvider.java\n│       │   └── SecurityConstants.java\n│       └── exception/     # Exception handling\n│           ├── GlobalExceptionHandler.java\n│           └── CustomException.java\n├── src/main/resources/    # Configuration files\n│   ├── application.properties\n│   └── application-security.properties\n├── src/test/java/         # Test files\n│   ├── controller/\n│   ├── service/\n│   └── security/\n├── pom.xml                # Project dependencies\n└── README.md             # Project documentation\n```\n\n## Required Files\n\n### 1. src/main/java/com/company/config/SecurityConfig.java\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .csrf().disable()\n            .authorizeRequests()\n            .antMatchers(\"/api/public/**\").permitAll()\n            .antMatchers(\"/api/**\").authenticated()\n            .and()\n            .sessionManagement()\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            .and()\n            .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n    }\n\n    @Bean\n    public JwtAuthenticationFilter jwtAuthenticationFilter() {\n        return new JwtAuthenticationFilter();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n```\n\n### 2. src/main/java/com/company/security/JwtTokenProvider.java\n```java\n@Component\npublic class JwtTokenProvider {\n    \n    private final String jwtSecret;\n    private final long jwtExpirationInMs;\n\n    public String generateToken(UserDetails userDetails) {\n        Map<String, Object> claims = new HashMap<>();\n        claims.put(\"roles\", userDetails.getAuthorities());\n        \n        return Jwts.builder()\n            .setClaims(claims)\n            .setSubject(userDetails.getUsername())\n            .setIssuedAt(new Date())\n            .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationInMs))\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\n            .compact();\n    }\n\n    public boolean validateToken(String token) {\n        try {\n            Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token);\n            return true;\n        } catch (Exception ex) {\n            return false;\n        }\n    }\n}\n```\n\n### 3. src/main/java/com/company/controller/ApiController.java\n```java\n@RestController\n@RequestMapping(\"/api\")\npublic class ApiController {\n    \n    @GetMapping(\"/protected\")\n    public ResponseEntity<?> getProtectedData() {\n        return ResponseEntity.ok(new ApiResponse(\"Protected data accessed successfully\"));\n    }\n}\n```\n\n### 4. src/main/java/com/company/service/DataService.java\n```java\n@Service\npublic class DataService {\n    \n    @Autowired\n    private EncryptionService encryptionService;\n\n    public String encryptData(String data) {\n        return encryptionService.encrypt(data);\n    }\n\n    public String decryptData(String encryptedData) {\n        return encryptionService.decrypt(encryptedData);\n    }\n}\n```\n\n### 5. src/main/java/com/company/exception/GlobalExceptionHandler.java\n```java\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n    \n    @ExceptionHandler(ValidationException.class)\n    public ResponseEntity<ErrorResponse> handleValidationException(ValidationException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"Validation Error\",\n            ex.getMessage(),\n            HttpStatus.BAD_REQUEST\n        );\n        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);\n    }\n\n    @ExceptionHandler(AuthenticationException.class)\n    public ResponseEntity<ErrorResponse> handleAuthenticationException(AuthenticationException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"Authentication Error\",\n            ex.getMessage(),\n            HttpStatus.UNAUTHORIZED\n        );\n        return new ResponseEntity<>(error, HttpStatus.UNAUTHORIZED);\n    }\n}\n```\n\n### 6. src/main/resources/application.properties\n```properties\n# Security properties\njwt.secret=${JWT_SECRET}\njwt.expirationInMs=86400000\n\n# Database properties\nspring.datasource.url=${DB_URL}\nspring.datasource.username=${DB_USERNAME}\nspring.datasource.password=${DB_PASSWORD}\n\n# Logging\nlogging.level.org.springframework.security=DEBUG\n```\n\n## Dependencies (pom.xml)\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.jsonwebtoken</groupId>\n        <artifactId>jjwt</artifactId>\n        <version>0.9.1</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <optional>true</optional>\n    </dependency>\n</dependencies>\n```\n\n## Security Considerations\n1. Implement proper JWT token validation\n2. Use Spring Security for authentication\n3. Enable CORS with proper configuration\n4. Implement rate limiting\n5. Use security headers\n6. Encrypt sensitive data\n7. Implement proper error handling\n8. Use secure session management\n9. Validate all input data\n10. Implement proper logging\n\n## Best Practices\n1. Follow Spring Security best practices\n2. Use environment variables for sensitive data\n3. Implement proper error handling\n4. Use proper validation annotations\n5. Implement comprehensive testing\n6. Use proper logging\n7. Follow the principle of least privilege\n8. Implement proper session management\n9. Use secure communication protocols\n10. Regular security updates \n\nIMPORTANT: You MUST follow these rules exactly:\n1. Follow directory structure exactly\n2. Include config files (pom.xml/package.json)\n3. Java: all code under src/main/java/com/company\n4. Node/React: all code under src/\n5. Format each file EXACTLY as shown below:\n\n===FILE_START===\npath/to/file.ext\n===CONTENT_START===\n// Your code here\n===CONTENT_END===\n===FILE_END===\n\nDO NOT use markdown code blocks (```). Use the exact format above for each file.\nYou must generate at least one file. Each file must follow the format above exactly.\n\nTask Details:\n- ID: P360-43\n- Summary: P360 sample business requirement task\n- Description: Create a order management API where itBackground\n\nThe customer service team currently receives feedback through a web form, but has no automated way to be notified when urgent issues are reported. Team members must regularly check the system, causing delays in addressing time-sensitive customer concerns.\n\nh2. Business Requirement\n\nCreate a notification system that alerts the appropriate customer service team member when customer feedback requiring immediate attention is submitted.\n\nh2. Key Features\n\n# Automatically analyze incoming feedback for urgent keywords or negative sentiment\n# Route notifications to the appropriate team member based on the feedback category\n# Allow team members to acknowledge receipt of notifications\n# Provide a simple dashboard showing pending and acknowledged urgent feedback\n\nh2. Success Criteria\n\n* Urgent feedback notifications are sent within 2 minutes of submission\n* Team members acknowledge receipt of 95% of urgent notifications within 15 minutes during business hours\n* Customer satisfaction for urgent issues improves by 10% within three months is fetching \n- Status: To Do\n- Priority: Medium\n\nLanguage: java\nSecurity: medium\nAuth: jwt\nData: internal",
    "messages": [
      {
        "role": "system",
        "content": "You are a code generation assistant. Generate code for a java project following this structure:\n\n# Java Project Structure Template\n\n## Project Structure\n```\nproject/\n├── src/main/java/\n│   └── com/company/\n│       ├── controller/     # REST controllers\n│       │   ├── AuthController.java\n│       │   ├── UserController.java\n│       │   └── ApiController.java\n│       ├── model/         # Data models\n│       │   ├── User.java\n│       │   ├── Role.java\n│       │   └── dto/\n│       ├── service/       # Business logic\n│       │   ├── AuthService.java\n│       │   ├── UserService.java\n│       │   └── DataService.java\n│       ├── repository/    # Data access\n│       │   ├── UserRepository.java\n│       │   └── RoleRepository.java\n│       ├── config/        # Configuration\n│       │   ├── SecurityConfig.java\n│       │   └── WebConfig.java\n│       ├── security/      # Security components\n│       │   ├── JwtTokenProvider.java\n│       │   └── SecurityConstants.java\n│       └── exception/     # Exception handling\n│           ├── GlobalExceptionHandler.java\n│           └── CustomException.java\n├── src/main/resources/    # Configuration files\n│   ├── application.properties\n│   └── application-security.properties\n├── src/test/java/         # Test files\n│   ├── controller/\n│   ├── service/\n│   └── security/\n├── pom.xml                # Project dependencies\n└── README.md             # Project documentation\n```\n\n## Required Files\n\n### 1. src/main/java/com/company/config/SecurityConfig.java\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .csrf().disable()\n            .authorizeRequests()\n            .antMatchers(\"/api/public/**\").permitAll()\n            .antMatchers(\"/api/**\").authenticated()\n            .and()\n            .sessionManagement()\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            .and()\n            .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n    }\n\n    @Bean\n    public JwtAuthenticationFilter jwtAuthenticationFilter() {\n        return new JwtAuthenticationFilter();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n```\n\n### 2. src/main/java/com/company/security/JwtTokenProvider.java\n```java\n@Component\npublic class JwtTokenProvider {\n    \n    private final String jwtSecret;\n    private final long jwtExpirationInMs;\n\n    public String generateToken(UserDetails userDetails) {\n        Map<String, Object> claims = new HashMap<>();\n        claims.put(\"roles\", userDetails.getAuthorities());\n        \n        return Jwts.builder()\n            .setClaims(claims)\n            .setSubject(userDetails.getUsername())\n            .setIssuedAt(new Date())\n            .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationInMs))\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\n            .compact();\n    }\n\n    public boolean validateToken(String token) {\n        try {\n            Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token);\n            return true;\n        } catch (Exception ex) {\n            return false;\n        }\n    }\n}\n```\n\n### 3. src/main/java/com/company/controller/ApiController.java\n```java\n@RestController\n@RequestMapping(\"/api\")\npublic class ApiController {\n    \n    @GetMapping(\"/protected\")\n    public ResponseEntity<?> getProtectedData() {\n        return ResponseEntity.ok(new ApiResponse(\"Protected data accessed successfully\"));\n    }\n}\n```\n\n### 4. src/main/java/com/company/service/DataService.java\n```java\n@Service\npublic class DataService {\n    \n    @Autowired\n    private EncryptionService encryptionService;\n\n    public String encryptData(String data) {\n        return encryptionService.encrypt(data);\n    }\n\n    public String decryptData(String encryptedData) {\n        return encryptionService.decrypt(encryptedData);\n    }\n}\n```\n\n### 5. src/main/java/com/company/exception/GlobalExceptionHandler.java\n```java\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n    \n    @ExceptionHandler(ValidationException.class)\n    public ResponseEntity<ErrorResponse> handleValidationException(ValidationException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"Validation Error\",\n            ex.getMessage(),\n            HttpStatus.BAD_REQUEST\n        );\n        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);\n    }\n\n    @ExceptionHandler(AuthenticationException.class)\n    public ResponseEntity<ErrorResponse> handleAuthenticationException(AuthenticationException ex) {\n        ErrorResponse error = new ErrorResponse(\n            \"Authentication Error\",\n            ex.getMessage(),\n            HttpStatus.UNAUTHORIZED\n        );\n        return new ResponseEntity<>(error, HttpStatus.UNAUTHORIZED);\n    }\n}\n```\n\n### 6. src/main/resources/application.properties\n```properties\n# Security properties\njwt.secret=${JWT_SECRET}\njwt.expirationInMs=86400000\n\n# Database properties\nspring.datasource.url=${DB_URL}\nspring.datasource.username=${DB_USERNAME}\nspring.datasource.password=${DB_PASSWORD}\n\n# Logging\nlogging.level.org.springframework.security=DEBUG\n```\n\n## Dependencies (pom.xml)\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.jsonwebtoken</groupId>\n        <artifactId>jjwt</artifactId>\n        <version>0.9.1</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <optional>true</optional>\n    </dependency>\n</dependencies>\n```\n\n## Security Considerations\n1. Implement proper JWT token validation\n2. Use Spring Security for authentication\n3. Enable CORS with proper configuration\n4. Implement rate limiting\n5. Use security headers\n6. Encrypt sensitive data\n7. Implement proper error handling\n8. Use secure session management\n9. Validate all input data\n10. Implement proper logging\n\n## Best Practices\n1. Follow Spring Security best practices\n2. Use environment variables for sensitive data\n3. Implement proper error handling\n4. Use proper validation annotations\n5. Implement comprehensive testing\n6. Use proper logging\n7. Follow the principle of least privilege\n8. Implement proper session management\n9. Use secure communication protocols\n10. Regular security updates \n\nIMPORTANT: You MUST follow these rules exactly:\n1. Follow directory structure exactly\n2. Include config files (pom.xml/package.json)\n3. Java: all code under src/main/java/com/company\n4. Node/React: all code under src/\n5. Format each file EXACTLY as shown below:\n\n===FILE_START===\npath/to/file.ext\n===CONTENT_START===\n// Your code here\n===CONTENT_END===\n===FILE_END===\n\nDO NOT use markdown code blocks (```). Use the exact format above for each file.\nYou must generate at least one file. Each file must follow the format above exactly.\n\nTask Details:\n- ID: P360-43\n- Summary: P360 sample business requirement task\n- Description: Create a order management API where itBackground\n\nThe customer service team currently receives feedback through a web form, but has no automated way to be notified when urgent issues are reported. Team members must regularly check the system, causing delays in addressing time-sensitive customer concerns.\n\nh2. Business Requirement\n\nCreate a notification system that alerts the appropriate customer service team member when customer feedback requiring immediate attention is submitted.\n\nh2. Key Features\n\n# Automatically analyze incoming feedback for urgent keywords or negative sentiment\n# Route notifications to the appropriate team member based on the feedback category\n# Allow team members to acknowledge receipt of notifications\n# Provide a simple dashboard showing pending and acknowledged urgent feedback\n\nh2. Success Criteria\n\n* Urgent feedback notifications are sent within 2 minutes of submission\n* Team members acknowledge receipt of 95% of urgent notifications within 15 minutes during business hours\n* Customer satisfaction for urgent issues improves by 10% within three months is fetching \n- Status: To Do\n- Priority: Medium\n\nLanguage: java\nSecurity: medium\nAuth: jwt\nData: internal"
      }
    ]
  },
  "parameters": {
    "securityLevel": "medium",
    "authMethod": "jwt",
    "dataSensitivity": "internal"
  },
  "generatedFiles": [
    "p360/p360_43/java/src/main/java/com/company/config/SecurityConfig.java",
    "p360/p360_43/java/src/main/java/com/company/security/JwtTokenProvider.java",
    "p360/p360_43/java/src/main/java/com/company/controller/ApiController.java",
    "p360/p360_43/java/src/main/java/com/company/service/DataService.java",
    "p360/p360_43/java/src/main/java/com/company/exception/GlobalExceptionHandler.java",
    "p360/p360_43/java/src/main/resources/application.properties",
    "p360/p360_43/java/pom.xml"
  ]
}