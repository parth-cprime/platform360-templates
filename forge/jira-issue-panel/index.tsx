import ForgeUI, { 
    render, 
    IssuePanel, 
    Text, 
    Strong, 
    Fragment, 
    useState, 
    useEffect,
    Button,
    StatusLozenge,
    Badge,
    SectionMessage,
    Link,
    Heading,
    Code
  } from '@forge/ui';
  import api, { route, storage } from '@forge/api';
  
  const App = () => {
    const [issueData, setIssueData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [viewCount, setViewCount] = useState(0);
  
    useEffect(async () => {
      try {
        // Get current issue data following Atlassian best practices
        const response = await api.asUser().requestJira(
          route`/rest/api/3/issue/${context.extension.issue.key}?expand=names,schema,operations,editmeta,changelog,renderedFields`
        );
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        setIssueData(data);
  
        // Track view count using Forge storage
        const storageKey = `view-count-${data.key}`;
        const currentCount = await storage.get(storageKey) || 0;
        const newCount = currentCount + 1;
        await storage.set(storageKey, newCount);
        setViewCount(newCount);
  
      } catch (err) {
        console.error('Error fetching issue data:', err);
        setError(err.message || 'Failed to load issue data');
      } finally {
        setLoading(false);
      }
    }, []);
  
    const refreshData = async () => {
      setLoading(true);
      setError(null);
      
      try {
        const response = await api.asUser().requestJira(
          route`/rest/api/3/issue/${context.extension.issue.key}?expand=names,schema,operations,editmeta,changelog,renderedFields`
        );
        const data = await response.json();
        setIssueData(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
  
    if (loading) {
      return (
        <IssuePanel>
          <SectionMessage appearance="information">
            <Text>Loading {{appName}}...</Text>
          </SectionMessage>
        </IssuePanel>
      );
    }
  
    if (error) {
      return (
        <IssuePanel>
          <SectionMessage appearance="error">
            <Text>Error: {error}</Text>
            <Button text="Retry" onClick={refreshData} />
          </SectionMessage>
        </IssuePanel>
      );
    }
  
    return (
      <IssuePanel>
        <Fragment>
          <Heading size="medium">ðŸŽ‰ {{appName}}</Heading>
          <Text>{{description}}</Text>
          
          {issueData && (
            <Fragment>
              <Text>
                <Strong>Issue:</Strong> <Code text={issueData.key} />
              </Text>
              <Text>
                <Strong>Status:</Strong> 
                <StatusLozenge 
                  text={issueData.fields.status.name}
                  appearance={issueData.fields.status.statusCategory.colorName === 'green' ? 'success' : 
                            issueData.fields.status.statusCategory.colorName === 'yellow' ? 'inprogress' : 'default'}
                />
              </Text>
              <Text>
                <Strong>Priority:</Strong> {issueData.fields.priority?.name || 'None'}
              </Text>
              <Text>
                <Strong>Assignee:</Strong> {issueData.fields.assignee?.displayName || 'Unassigned'}
              </Text>
              <Text>
                <Strong>Reporter:</Strong> {issueData.fields.reporter?.displayName || 'Unknown'}
              </Text>
              <Text>
                <Strong>Created:</Strong> {new Date(issueData.fields.created).toLocaleDateString()}
              </Text>
              <Text>
                <Strong>Updated:</Strong> {new Date(issueData.fields.updated).toLocaleDateString()}
              </Text>
              
              <Badge text={`Views: ${viewCount}`} appearance="added" />
              
              <Button text="Refresh Data" onClick={refreshData} />
            </Fragment>
          )}
          
          <Text>âœ¨ Generated by Platform360 Forge Generator</Text>
        </Fragment>
      </IssuePanel>
    );
  };
  
  export const run = render(<App />);